// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mongo_mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockSingleResult creates a new instance of MockSingleResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSingleResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSingleResult {
	mock := &MockSingleResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSingleResult is an autogenerated mock type for the SingleResult type
type MockSingleResult struct {
	mock.Mock
}

type MockSingleResult_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSingleResult) EXPECT() *MockSingleResult_Expecter {
	return &MockSingleResult_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function for the type MockSingleResult
func (_mock *MockSingleResult) Decode(v any) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSingleResult_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockSingleResult_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - v any
func (_e *MockSingleResult_Expecter) Decode(v interface{}) *MockSingleResult_Decode_Call {
	return &MockSingleResult_Decode_Call{Call: _e.mock.On("Decode", v)}
}

func (_c *MockSingleResult_Decode_Call) Run(run func(v any)) *MockSingleResult_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSingleResult_Decode_Call) Return(err error) *MockSingleResult_Decode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSingleResult_Decode_Call) RunAndReturn(run func(v any) error) *MockSingleResult_Decode_Call {
	_c.Call.Return(run)
	return _c
}
