// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mongo_mocks

import (
	"g6/blog-api/Infrastructure/database/mongo"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// Client provides a mock function for the type MockDatabase
func (_mock *MockDatabase) Client() mongo.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 mongo.Client
	if returnFunc, ok := ret.Get(0).(func() mongo.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Client)
		}
	}
	return r0
}

// MockDatabase_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockDatabase_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Client() *MockDatabase_Client_Call {
	return &MockDatabase_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *MockDatabase_Client_Call) Run(run func()) *MockDatabase_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Client_Call) Return(client mongo.Client) *MockDatabase_Client_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockDatabase_Client_Call) RunAndReturn(run func() mongo.Client) *MockDatabase_Client_Call {
	_c.Call.Return(run)
	return _c
}

// Collection provides a mock function for the type MockDatabase
func (_mock *MockDatabase) Collection(s string) mongo.Collection {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Collection")
	}

	var r0 mongo.Collection
	if returnFunc, ok := ret.Get(0).(func(string) mongo.Collection); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Collection)
		}
	}
	return r0
}

// MockDatabase_Collection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collection'
type MockDatabase_Collection_Call struct {
	*mock.Call
}

// Collection is a helper method to define mock.On call
//   - s string
func (_e *MockDatabase_Expecter) Collection(s interface{}) *MockDatabase_Collection_Call {
	return &MockDatabase_Collection_Call{Call: _e.mock.On("Collection", s)}
}

func (_c *MockDatabase_Collection_Call) Run(run func(s string)) *MockDatabase_Collection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDatabase_Collection_Call) Return(collection mongo.Collection) *MockDatabase_Collection_Call {
	_c.Call.Return(collection)
	return _c
}

func (_c *MockDatabase_Collection_Call) RunAndReturn(run func(s string) mongo.Collection) *MockDatabase_Collection_Call {
	_c.Call.Return(run)
	return _c
}
