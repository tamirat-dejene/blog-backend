// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mongo_mocks

import (
	"context"
	"g6/blog-api/Infrastructure/database/mongo"

	mock "github.com/stretchr/testify/mock"
	mongo0 "go.mongodb.org/mongo-driver/mongo"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function for the type MockClient
func (_mock *MockClient) Connect(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Connect(ctx interface{}) *MockClient_Connect_Call {
	return &MockClient_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *MockClient_Connect_Call) Run(run func(ctx context.Context)) *MockClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Connect_Call) Return(err error) *MockClient_Connect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Connect_Call) RunAndReturn(run func(ctx context.Context) error) *MockClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function for the type MockClient
func (_mock *MockClient) Database(name string) mongo.Database {
	ret := _mock.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Database")
	}

	var r0 mongo.Database
	if returnFunc, ok := ret.Get(0).(func(string) mongo.Database); ok {
		r0 = returnFunc(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Database)
		}
	}
	return r0
}

// MockClient_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'
type MockClient_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call
//   - name string
func (_e *MockClient_Expecter) Database(name interface{}) *MockClient_Database_Call {
	return &MockClient_Database_Call{Call: _e.mock.On("Database", name)}
}

func (_c *MockClient_Database_Call) Run(run func(name string)) *MockClient_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Database_Call) Return(database mongo.Database) *MockClient_Database_Call {
	_c.Call.Return(database)
	return _c
}

func (_c *MockClient_Database_Call) RunAndReturn(run func(name string) mongo.Database) *MockClient_Database_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function for the type MockClient
func (_mock *MockClient) Disconnect(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockClient_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Disconnect(ctx interface{}) *MockClient_Disconnect_Call {
	return &MockClient_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *MockClient_Disconnect_Call) Run(run func(ctx context.Context)) *MockClient_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Disconnect_Call) Return(err error) *MockClient_Disconnect_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Disconnect_Call) RunAndReturn(run func(ctx context.Context) error) *MockClient_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockClient
func (_mock *MockClient) Ping(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Ping(ctx interface{}) *MockClient_Ping_Call {
	return &MockClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockClient_Ping_Call) Run(run func(ctx context.Context)) *MockClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_Ping_Call) Return(err error) *MockClient_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Ping_Call) RunAndReturn(run func(ctx context.Context) error) *MockClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// StartSession provides a mock function for the type MockClient
func (_mock *MockClient) StartSession() (mongo0.Session, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartSession")
	}

	var r0 mongo0.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (mongo0.Session, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() mongo0.Session); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo0.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_StartSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSession'
type MockClient_StartSession_Call struct {
	*mock.Call
}

// StartSession is a helper method to define mock.On call
func (_e *MockClient_Expecter) StartSession() *MockClient_StartSession_Call {
	return &MockClient_StartSession_Call{Call: _e.mock.On("StartSession")}
}

func (_c *MockClient_StartSession_Call) Run(run func()) *MockClient_StartSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_StartSession_Call) Return(session mongo0.Session, err error) *MockClient_StartSession_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockClient_StartSession_Call) RunAndReturn(run func() (mongo0.Session, error)) *MockClient_StartSession_Call {
	_c.Call.Return(run)
	return _c
}

// UseSession provides a mock function for the type MockClient
func (_mock *MockClient) UseSession(ctx context.Context, fn func(mongo0.SessionContext) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for UseSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(mongo0.SessionContext) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_UseSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UseSession'
type MockClient_UseSession_Call struct {
	*mock.Call
}

// UseSession is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(mongo0.SessionContext) error
func (_e *MockClient_Expecter) UseSession(ctx interface{}, fn interface{}) *MockClient_UseSession_Call {
	return &MockClient_UseSession_Call{Call: _e.mock.On("UseSession", ctx, fn)}
}

func (_c *MockClient_UseSession_Call) Run(run func(ctx context.Context, fn func(mongo0.SessionContext) error)) *MockClient_UseSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(mongo0.SessionContext) error
		if args[1] != nil {
			arg1 = args[1].(func(mongo0.SessionContext) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_UseSession_Call) Return(err error) *MockClient_UseSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_UseSession_Call) RunAndReturn(run func(ctx context.Context, fn func(mongo0.SessionContext) error) error) *MockClient_UseSession_Call {
	_c.Call.Return(run)
	return _c
}
