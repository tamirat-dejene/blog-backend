// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mongo_mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCursor creates a new instance of MockCursor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCursor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCursor {
	mock := &MockCursor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCursor is an autogenerated mock type for the Cursor type
type MockCursor struct {
	mock.Mock
}

type MockCursor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCursor) EXPECT() *MockCursor_Expecter {
	return &MockCursor_Expecter{mock: &_m.Mock}
}

// All provides a mock function for the type MockCursor
func (_mock *MockCursor) All(ctx context.Context, results any) error {
	ret := _mock.Called(ctx, results)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) error); ok {
		r0 = returnFunc(ctx, results)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCursor_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockCursor_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
//   - ctx context.Context
//   - results any
func (_e *MockCursor_Expecter) All(ctx interface{}, results interface{}) *MockCursor_All_Call {
	return &MockCursor_All_Call{Call: _e.mock.On("All", ctx, results)}
}

func (_c *MockCursor_All_Call) Run(run func(ctx context.Context, results any)) *MockCursor_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCursor_All_Call) Return(err error) *MockCursor_All_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCursor_All_Call) RunAndReturn(run func(ctx context.Context, results any) error) *MockCursor_All_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockCursor
func (_mock *MockCursor) Close(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCursor_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockCursor_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCursor_Expecter) Close(ctx interface{}) *MockCursor_Close_Call {
	return &MockCursor_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *MockCursor_Close_Call) Run(run func(ctx context.Context)) *MockCursor_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCursor_Close_Call) Return(err error) *MockCursor_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCursor_Close_Call) RunAndReturn(run func(ctx context.Context) error) *MockCursor_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Decode provides a mock function for the type MockCursor
func (_mock *MockCursor) Decode(v any) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCursor_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type MockCursor_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - v any
func (_e *MockCursor_Expecter) Decode(v interface{}) *MockCursor_Decode_Call {
	return &MockCursor_Decode_Call{Call: _e.mock.On("Decode", v)}
}

func (_c *MockCursor_Decode_Call) Run(run func(v any)) *MockCursor_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCursor_Decode_Call) Return(err error) *MockCursor_Decode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCursor_Decode_Call) RunAndReturn(run func(v any) error) *MockCursor_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function for the type MockCursor
func (_mock *MockCursor) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCursor_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockCursor_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockCursor_Expecter) Err() *MockCursor_Err_Call {
	return &MockCursor_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockCursor_Err_Call) Run(run func()) *MockCursor_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCursor_Err_Call) Return(err error) *MockCursor_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCursor_Err_Call) RunAndReturn(run func() error) *MockCursor_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function for the type MockCursor
func (_mock *MockCursor) Next(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockCursor_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockCursor_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCursor_Expecter) Next(ctx interface{}) *MockCursor_Next_Call {
	return &MockCursor_Next_Call{Call: _e.mock.On("Next", ctx)}
}

func (_c *MockCursor_Next_Call) Run(run func(ctx context.Context)) *MockCursor_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCursor_Next_Call) Return(b bool) *MockCursor_Next_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockCursor_Next_Call) RunAndReturn(run func(ctx context.Context) bool) *MockCursor_Next_Call {
	_c.Call.Return(run)
	return _c
}
