// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mongo_mocks

import (
	"context"
	"g6/blog-api/Infrastructure/database/mongo"

	mock "github.com/stretchr/testify/mock"
	mongo0 "go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// NewMockCollection creates a new instance of MockCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollection {
	mock := &MockCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCollection is an autogenerated mock type for the Collection type
type MockCollection struct {
	mock.Mock
}

type MockCollection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollection) EXPECT() *MockCollection_Expecter {
	return &MockCollection_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function for the type MockCollection
func (_mock *MockCollection) Aggregate(ctx context.Context, pipeline any) (mongo.Cursor, error) {
	ret := _mock.Called(ctx, pipeline)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 mongo.Cursor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) (mongo.Cursor, error)); ok {
		return returnFunc(ctx, pipeline)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) mongo.Cursor); ok {
		r0 = returnFunc(ctx, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Cursor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any) error); ok {
		r1 = returnFunc(ctx, pipeline)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockCollection_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline any
func (_e *MockCollection_Expecter) Aggregate(ctx interface{}, pipeline interface{}) *MockCollection_Aggregate_Call {
	return &MockCollection_Aggregate_Call{Call: _e.mock.On("Aggregate", ctx, pipeline)}
}

func (_c *MockCollection_Aggregate_Call) Run(run func(ctx context.Context, pipeline any)) *MockCollection_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_Aggregate_Call) Return(cursor mongo.Cursor, err error) *MockCollection_Aggregate_Call {
	_c.Call.Return(cursor, err)
	return _c
}

func (_c *MockCollection_Aggregate_Call) RunAndReturn(run func(ctx context.Context, pipeline any) (mongo.Cursor, error)) *MockCollection_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// CountDocuments provides a mock function for the type MockCollection
func (_mock *MockCollection) CountDocuments(ctx context.Context, filter any, opts ...*options.CountOptions) (int64, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CountDocuments")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, ...*options.CountOptions) (int64, error)); ok {
		return returnFunc(ctx, filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, ...*options.CountOptions) int64); ok {
		r0 = returnFunc(ctx, filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any, ...*options.CountOptions) error); ok {
		r1 = returnFunc(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_CountDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDocuments'
type MockCollection_CountDocuments_Call struct {
	*mock.Call
}

// CountDocuments is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
//   - opts ...*options.CountOptions
func (_e *MockCollection_Expecter) CountDocuments(ctx interface{}, filter interface{}, opts ...interface{}) *MockCollection_CountDocuments_Call {
	return &MockCollection_CountDocuments_Call{Call: _e.mock.On("CountDocuments",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockCollection_CountDocuments_Call) Run(run func(ctx context.Context, filter any, opts ...*options.CountOptions)) *MockCollection_CountDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 []*options.CountOptions
		var variadicArgs []*options.CountOptions
		if len(args) > 2 {
			variadicArgs = args[2].([]*options.CountOptions)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCollection_CountDocuments_Call) Return(n int64, err error) *MockCollection_CountDocuments_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockCollection_CountDocuments_Call) RunAndReturn(run func(ctx context.Context, filter any, opts ...*options.CountOptions) (int64, error)) *MockCollection_CountDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function for the type MockCollection
func (_mock *MockCollection) DeleteOne(ctx context.Context, filter any) (int64, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) (int64, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) int64); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type MockCollection_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
func (_e *MockCollection_Expecter) DeleteOne(ctx interface{}, filter interface{}) *MockCollection_DeleteOne_Call {
	return &MockCollection_DeleteOne_Call{Call: _e.mock.On("DeleteOne", ctx, filter)}
}

func (_c *MockCollection_DeleteOne_Call) Run(run func(ctx context.Context, filter any)) *MockCollection_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_DeleteOne_Call) Return(n int64, err error) *MockCollection_DeleteOne_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockCollection_DeleteOne_Call) RunAndReturn(run func(ctx context.Context, filter any) (int64, error)) *MockCollection_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockCollection
func (_mock *MockCollection) Find(ctx context.Context, filter any, opts ...*options.FindOptions) (mongo.Cursor, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 mongo.Cursor
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, ...*options.FindOptions) (mongo.Cursor, error)); ok {
		return returnFunc(ctx, filter, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, ...*options.FindOptions) mongo.Cursor); ok {
		r0 = returnFunc(ctx, filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.Cursor)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any, ...*options.FindOptions) error); ok {
		r1 = returnFunc(ctx, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockCollection_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
//   - opts ...*options.FindOptions
func (_e *MockCollection_Expecter) Find(ctx interface{}, filter interface{}, opts ...interface{}) *MockCollection_Find_Call {
	return &MockCollection_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx, filter}, opts...)...)}
}

func (_c *MockCollection_Find_Call) Run(run func(ctx context.Context, filter any, opts ...*options.FindOptions)) *MockCollection_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 []*options.FindOptions
		var variadicArgs []*options.FindOptions
		if len(args) > 2 {
			variadicArgs = args[2].([]*options.FindOptions)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCollection_Find_Call) Return(cursor mongo.Cursor, err error) *MockCollection_Find_Call {
	_c.Call.Return(cursor, err)
	return _c
}

func (_c *MockCollection_Find_Call) RunAndReturn(run func(ctx context.Context, filter any, opts ...*options.FindOptions) (mongo.Cursor, error)) *MockCollection_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function for the type MockCollection
func (_mock *MockCollection) FindOne(ctx context.Context, filter any) mongo.SingleResult {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 mongo.SingleResult
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) mongo.SingleResult); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mongo.SingleResult)
		}
	}
	return r0
}

// MockCollection_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockCollection_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
func (_e *MockCollection_Expecter) FindOne(ctx interface{}, filter interface{}) *MockCollection_FindOne_Call {
	return &MockCollection_FindOne_Call{Call: _e.mock.On("FindOne", ctx, filter)}
}

func (_c *MockCollection_FindOne_Call) Run(run func(ctx context.Context, filter any)) *MockCollection_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_FindOne_Call) Return(singleResult mongo.SingleResult) *MockCollection_FindOne_Call {
	_c.Call.Return(singleResult)
	return _c
}

func (_c *MockCollection_FindOne_Call) RunAndReturn(run func(ctx context.Context, filter any) mongo.SingleResult) *MockCollection_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type MockCollection
func (_mock *MockCollection) InsertMany(ctx context.Context, documents []any) (*mongo0.InsertManyResult, error) {
	ret := _mock.Called(ctx, documents)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 *mongo0.InsertManyResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []any) (*mongo0.InsertManyResult, error)); ok {
		return returnFunc(ctx, documents)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []any) *mongo0.InsertManyResult); ok {
		r0 = returnFunc(ctx, documents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo0.InsertManyResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []any) error); ok {
		r1 = returnFunc(ctx, documents)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockCollection_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - ctx context.Context
//   - documents []any
func (_e *MockCollection_Expecter) InsertMany(ctx interface{}, documents interface{}) *MockCollection_InsertMany_Call {
	return &MockCollection_InsertMany_Call{Call: _e.mock.On("InsertMany", ctx, documents)}
}

func (_c *MockCollection_InsertMany_Call) Run(run func(ctx context.Context, documents []any)) *MockCollection_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []any
		if args[1] != nil {
			arg1 = args[1].([]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_InsertMany_Call) Return(insertManyResult *mongo0.InsertManyResult, err error) *MockCollection_InsertMany_Call {
	_c.Call.Return(insertManyResult, err)
	return _c
}

func (_c *MockCollection_InsertMany_Call) RunAndReturn(run func(ctx context.Context, documents []any) (*mongo0.InsertManyResult, error)) *MockCollection_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function for the type MockCollection
func (_mock *MockCollection) InsertOne(ctx context.Context, document any) (*mongo0.InsertOneResult, error) {
	ret := _mock.Called(ctx, document)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 *mongo0.InsertOneResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) (*mongo0.InsertOneResult, error)); ok {
		return returnFunc(ctx, document)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any) *mongo0.InsertOneResult); ok {
		r0 = returnFunc(ctx, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo0.InsertOneResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any) error); ok {
		r1 = returnFunc(ctx, document)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockCollection_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - document any
func (_e *MockCollection_Expecter) InsertOne(ctx interface{}, document interface{}) *MockCollection_InsertOne_Call {
	return &MockCollection_InsertOne_Call{Call: _e.mock.On("InsertOne", ctx, document)}
}

func (_c *MockCollection_InsertOne_Call) Run(run func(ctx context.Context, document any)) *MockCollection_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCollection_InsertOne_Call) Return(insertOneResult *mongo0.InsertOneResult, err error) *MockCollection_InsertOne_Call {
	_c.Call.Return(insertOneResult, err)
	return _c
}

func (_c *MockCollection_InsertOne_Call) RunAndReturn(run func(ctx context.Context, document any) (*mongo0.InsertOneResult, error)) *MockCollection_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMany provides a mock function for the type MockCollection
func (_mock *MockCollection) UpdateMany(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions) (*mongo0.UpdateResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, update, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter, update)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 *mongo0.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, any, ...*options.UpdateOptions) (*mongo0.UpdateResult, error)); ok {
		return returnFunc(ctx, filter, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, any, ...*options.UpdateOptions) *mongo0.UpdateResult); ok {
		r0 = returnFunc(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo0.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any, any, ...*options.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type MockCollection_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
//   - update any
//   - opts ...*options.UpdateOptions
func (_e *MockCollection_Expecter) UpdateMany(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockCollection_UpdateMany_Call {
	return &MockCollection_UpdateMany_Call{Call: _e.mock.On("UpdateMany",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockCollection_UpdateMany_Call) Run(run func(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions)) *MockCollection_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 []*options.UpdateOptions
		var variadicArgs []*options.UpdateOptions
		if len(args) > 3 {
			variadicArgs = args[3].([]*options.UpdateOptions)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCollection_UpdateMany_Call) Return(updateResult *mongo0.UpdateResult, err error) *MockCollection_UpdateMany_Call {
	_c.Call.Return(updateResult, err)
	return _c
}

func (_c *MockCollection_UpdateMany_Call) RunAndReturn(run func(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions) (*mongo0.UpdateResult, error)) *MockCollection_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function for the type MockCollection
func (_mock *MockCollection) UpdateOne(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions) (*mongo0.UpdateResult, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, filter, update, opts)
	} else {
		tmpRet = _mock.Called(ctx, filter, update)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *mongo0.UpdateResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, any, ...*options.UpdateOptions) (*mongo0.UpdateResult, error)); ok {
		return returnFunc(ctx, filter, update, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, any, ...*options.UpdateOptions) *mongo0.UpdateResult); ok {
		r0 = returnFunc(ctx, filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo0.UpdateResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, any, any, ...*options.UpdateOptions) error); ok {
		r1 = returnFunc(ctx, filter, update, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCollection_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockCollection_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - filter any
//   - update any
//   - opts ...*options.UpdateOptions
func (_e *MockCollection_Expecter) UpdateOne(ctx interface{}, filter interface{}, update interface{}, opts ...interface{}) *MockCollection_UpdateOne_Call {
	return &MockCollection_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{ctx, filter, update}, opts...)...)}
}

func (_c *MockCollection_UpdateOne_Call) Run(run func(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions)) *MockCollection_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 []*options.UpdateOptions
		var variadicArgs []*options.UpdateOptions
		if len(args) > 3 {
			variadicArgs = args[3].([]*options.UpdateOptions)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCollection_UpdateOne_Call) Return(updateResult *mongo0.UpdateResult, err error) *MockCollection_UpdateOne_Call {
	_c.Call.Return(updateResult, err)
	return _c
}

func (_c *MockCollection_UpdateOne_Call) RunAndReturn(run func(ctx context.Context, filter any, update any, opts ...*options.UpdateOptions) (*mongo0.UpdateResult, error)) *MockCollection_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}
