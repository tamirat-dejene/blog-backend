// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package redis_mocks

import (
	"context"
	redis0 "g6/blog-api/Infrastructure/redis"
	"time"

	"github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRedisClient creates a new instance of MockRedisClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRedisClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRedisClient {
	mock := &MockRedisClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRedisClient is an autogenerated mock type for the RedisClient type
type MockRedisClient struct {
	mock.Mock
}

type MockRedisClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRedisClient) EXPECT() *MockRedisClient_Expecter {
	return &MockRedisClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRedisClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRedisClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockRedisClient_Expecter) Close() *MockRedisClient_Close_Call {
	return &MockRedisClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockRedisClient_Close_Call) Run(run func()) *MockRedisClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRedisClient_Close_Call) Return(err error) *MockRedisClient_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRedisClient_Close_Call) RunAndReturn(run func() error) *MockRedisClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Decrement provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) Decrement(ctx context.Context, key string) (int64, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Decrement")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRedisClient_Decrement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrement'
type MockRedisClient_Decrement_Call struct {
	*mock.Call
}

// Decrement is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisClient_Expecter) Decrement(ctx interface{}, key interface{}) *MockRedisClient_Decrement_Call {
	return &MockRedisClient_Decrement_Call{Call: _e.mock.On("Decrement", ctx, key)}
}

func (_c *MockRedisClient_Decrement_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_Decrement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRedisClient_Decrement_Call) Return(n int64, err error) *MockRedisClient_Decrement_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRedisClient_Decrement_Call) RunAndReturn(run func(ctx context.Context, key string) (int64, error)) *MockRedisClient_Decrement_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) Delete(ctx context.Context, key string) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRedisClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRedisClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisClient_Expecter) Delete(ctx interface{}, key interface{}) *MockRedisClient_Delete_Call {
	return &MockRedisClient_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockRedisClient_Delete_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRedisClient_Delete_Call) Return(err error) *MockRedisClient_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRedisClient_Delete_Call) RunAndReturn(run func(ctx context.Context, key string) error) *MockRedisClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) Exists(ctx context.Context, key string) (bool, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRedisClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockRedisClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisClient_Expecter) Exists(ctx interface{}, key interface{}) *MockRedisClient_Exists_Call {
	return &MockRedisClient_Exists_Call{Call: _e.mock.On("Exists", ctx, key)}
}

func (_c *MockRedisClient_Exists_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRedisClient_Exists_Call) Return(b bool, err error) *MockRedisClient_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockRedisClient_Exists_Call) RunAndReturn(run func(ctx context.Context, key string) (bool, error)) *MockRedisClient_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Expire provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) Expire(ctx context.Context, key string, expiration time.Duration) error {
	ret := _mock.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Expire")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = returnFunc(ctx, key, expiration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRedisClient_Expire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expire'
type MockRedisClient_Expire_Call struct {
	*mock.Call
}

// Expire is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockRedisClient_Expecter) Expire(ctx interface{}, key interface{}, expiration interface{}) *MockRedisClient_Expire_Call {
	return &MockRedisClient_Expire_Call{Call: _e.mock.On("Expire", ctx, key, expiration)}
}

func (_c *MockRedisClient_Expire_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockRedisClient_Expire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRedisClient_Expire_Call) Return(err error) *MockRedisClient_Expire_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRedisClient_Expire_Call) RunAndReturn(run func(ctx context.Context, key string, expiration time.Duration) error) *MockRedisClient_Expire_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) Get(ctx context.Context, key string) (string, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRedisClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRedisClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisClient_Expecter) Get(ctx interface{}, key interface{}) *MockRedisClient_Get_Call {
	return &MockRedisClient_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockRedisClient_Get_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRedisClient_Get_Call) Return(s string, err error) *MockRedisClient_Get_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockRedisClient_Get_Call) RunAndReturn(run func(ctx context.Context, key string) (string, error)) *MockRedisClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetCacheExpiry provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) GetCacheExpiry() time.Duration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCacheExpiry")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// MockRedisClient_GetCacheExpiry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCacheExpiry'
type MockRedisClient_GetCacheExpiry_Call struct {
	*mock.Call
}

// GetCacheExpiry is a helper method to define mock.On call
func (_e *MockRedisClient_Expecter) GetCacheExpiry() *MockRedisClient_GetCacheExpiry_Call {
	return &MockRedisClient_GetCacheExpiry_Call{Call: _e.mock.On("GetCacheExpiry")}
}

func (_c *MockRedisClient_GetCacheExpiry_Call) Run(run func()) *MockRedisClient_GetCacheExpiry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRedisClient_GetCacheExpiry_Call) Return(duration time.Duration) *MockRedisClient_GetCacheExpiry_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *MockRedisClient_GetCacheExpiry_Call) RunAndReturn(run func() time.Duration) *MockRedisClient_GetCacheExpiry_Call {
	_c.Call.Return(run)
	return _c
}

// GetClient provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) GetClient() *redis.Client {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *redis.Client
	if returnFunc, ok := ret.Get(0).(func() *redis.Client); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Client)
		}
	}
	return r0
}

// MockRedisClient_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockRedisClient_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
func (_e *MockRedisClient_Expecter) GetClient() *MockRedisClient_GetClient_Call {
	return &MockRedisClient_GetClient_Call{Call: _e.mock.On("GetClient")}
}

func (_c *MockRedisClient_GetClient_Call) Run(run func()) *MockRedisClient_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRedisClient_GetClient_Call) Return(client *redis.Client) *MockRedisClient_GetClient_Call {
	_c.Call.Return(client)
	return _c
}

func (_c *MockRedisClient_GetClient_Call) RunAndReturn(run func() *redis.Client) *MockRedisClient_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// Increment provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) Increment(ctx context.Context, key string) (int64, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Increment")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRedisClient_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockRedisClient_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisClient_Expecter) Increment(ctx interface{}, key interface{}) *MockRedisClient_Increment_Call {
	return &MockRedisClient_Increment_Call{Call: _e.mock.On("Increment", ctx, key)}
}

func (_c *MockRedisClient_Increment_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRedisClient_Increment_Call) Return(n int64, err error) *MockRedisClient_Increment_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockRedisClient_Increment_Call) RunAndReturn(run func(ctx context.Context, key string) (int64, error)) *MockRedisClient_Increment_Call {
	_c.Call.Return(run)
	return _c
}

// Service provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) Service() *redis0.RedisService {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Service")
	}

	var r0 *redis0.RedisService
	if returnFunc, ok := ret.Get(0).(func() *redis0.RedisService); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis0.RedisService)
		}
	}
	return r0
}

// MockRedisClient_Service_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Service'
type MockRedisClient_Service_Call struct {
	*mock.Call
}

// Service is a helper method to define mock.On call
func (_e *MockRedisClient_Expecter) Service() *MockRedisClient_Service_Call {
	return &MockRedisClient_Service_Call{Call: _e.mock.On("Service")}
}

func (_c *MockRedisClient_Service_Call) Run(run func()) *MockRedisClient_Service_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRedisClient_Service_Call) Return(redisService *redis0.RedisService) *MockRedisClient_Service_Call {
	_c.Call.Return(redisService)
	return _c
}

func (_c *MockRedisClient_Service_Call) RunAndReturn(run func() *redis0.RedisService) *MockRedisClient_Service_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockRedisClient
func (_mock *MockRedisClient) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	ret := _mock.Called(ctx, key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any, time.Duration) error); ok {
		r0 = returnFunc(ctx, key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRedisClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockRedisClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value any
//   - expiration time.Duration
func (_e *MockRedisClient_Expecter) Set(ctx interface{}, key interface{}, value interface{}, expiration interface{}) *MockRedisClient_Set_Call {
	return &MockRedisClient_Set_Call{Call: _e.mock.On("Set", ctx, key, value, expiration)}
}

func (_c *MockRedisClient_Set_Call) Run(run func(ctx context.Context, key string, value any, expiration time.Duration)) *MockRedisClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockRedisClient_Set_Call) Return(err error) *MockRedisClient_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRedisClient_Set_Call) RunAndReturn(run func(ctx context.Context, key string, value any, expiration time.Duration) error) *MockRedisClient_Set_Call {
	_c.Call.Return(run)
	return _c
}
