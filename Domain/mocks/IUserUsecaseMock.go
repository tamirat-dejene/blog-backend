// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIUserUsecase creates a new instance of MockIUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserUsecase {
	mock := &MockIUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserUsecase is an autogenerated mock type for the IUserUsecase type
type MockIUserUsecase struct {
	mock.Mock
}

type MockIUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserUsecase) EXPECT() *MockIUserUsecase_Expecter {
	return &MockIUserUsecase_Expecter{mock: &_m.Mock}
}

// ChangePassword provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) ChangePassword(userID string, oldPassword string, newPassword string) error {
	ret := _mock.Called(userID, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(userID, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserUsecase_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type MockIUserUsecase_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//   - userID string
//   - oldPassword string
//   - newPassword string
func (_e *MockIUserUsecase_Expecter) ChangePassword(userID interface{}, oldPassword interface{}, newPassword interface{}) *MockIUserUsecase_ChangePassword_Call {
	return &MockIUserUsecase_ChangePassword_Call{Call: _e.mock.On("ChangePassword", userID, oldPassword, newPassword)}
}

func (_c *MockIUserUsecase_ChangePassword_Call) Run(run func(userID string, oldPassword string, newPassword string)) *MockIUserUsecase_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_ChangePassword_Call) Return(err error) *MockIUserUsecase_ChangePassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserUsecase_ChangePassword_Call) RunAndReturn(run func(userID string, oldPassword string, newPassword string) error) *MockIUserUsecase_ChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeRole provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) ChangeRole(initiatorRole string, targetUserID string, request domain.User) error {
	ret := _mock.Called(initiatorRole, targetUserID, request)

	if len(ret) == 0 {
		panic("no return value specified for ChangeRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, domain.User) error); ok {
		r0 = returnFunc(initiatorRole, targetUserID, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserUsecase_ChangeRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeRole'
type MockIUserUsecase_ChangeRole_Call struct {
	*mock.Call
}

// ChangeRole is a helper method to define mock.On call
//   - initiatorRole string
//   - targetUserID string
//   - request domain.User
func (_e *MockIUserUsecase_Expecter) ChangeRole(initiatorRole interface{}, targetUserID interface{}, request interface{}) *MockIUserUsecase_ChangeRole_Call {
	return &MockIUserUsecase_ChangeRole_Call{Call: _e.mock.On("ChangeRole", initiatorRole, targetUserID, request)}
}

func (_c *MockIUserUsecase_ChangeRole_Call) Run(run func(initiatorRole string, targetUserID string, request domain.User)) *MockIUserUsecase_ChangeRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.User
		if args[2] != nil {
			arg2 = args[2].(domain.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_ChangeRole_Call) Return(err error) *MockIUserUsecase_ChangeRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserUsecase_ChangeRole_Call) RunAndReturn(run func(initiatorRole string, targetUserID string, request domain.User) error) *MockIUserUsecase_ChangeRole_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsernameOrEmail provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) FindByUsernameOrEmail(context1 context.Context, s string) (*domain.User, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsernameOrEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserUsecase_FindByUsernameOrEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsernameOrEmail'
type MockIUserUsecase_FindByUsernameOrEmail_Call struct {
	*mock.Call
}

// FindByUsernameOrEmail is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockIUserUsecase_Expecter) FindByUsernameOrEmail(context1 interface{}, s interface{}) *MockIUserUsecase_FindByUsernameOrEmail_Call {
	return &MockIUserUsecase_FindByUsernameOrEmail_Call{Call: _e.mock.On("FindByUsernameOrEmail", context1, s)}
}

func (_c *MockIUserUsecase_FindByUsernameOrEmail_Call) Run(run func(context1 context.Context, s string)) *MockIUserUsecase_FindByUsernameOrEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_FindByUsernameOrEmail_Call) Return(user *domain.User, err error) *MockIUserUsecase_FindByUsernameOrEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserUsecase_FindByUsernameOrEmail_Call) RunAndReturn(run func(context1 context.Context, s string) (*domain.User, error)) *MockIUserUsecase_FindByUsernameOrEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByID provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) FindUserByID(s string) (*domain.User, error) {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return returnFunc(s)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserUsecase_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type MockIUserUsecase_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//   - s string
func (_e *MockIUserUsecase_Expecter) FindUserByID(s interface{}) *MockIUserUsecase_FindUserByID_Call {
	return &MockIUserUsecase_FindUserByID_Call{Call: _e.mock.On("FindUserByID", s)}
}

func (_c *MockIUserUsecase_FindUserByID_Call) Run(run func(s string)) *MockIUserUsecase_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_FindUserByID_Call) Return(user *domain.User, err error) *MockIUserUsecase_FindUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserUsecase_FindUserByID_Call) RunAndReturn(run func(s string) (*domain.User, error)) *MockIUserUsecase_FindUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) GetUserByEmail(email string) (*domain.User, error) {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return returnFunc(email)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = returnFunc(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserUsecase_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockIUserUsecase_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockIUserUsecase_Expecter) GetUserByEmail(email interface{}) *MockIUserUsecase_GetUserByEmail_Call {
	return &MockIUserUsecase_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email)}
}

func (_c *MockIUserUsecase_GetUserByEmail_Call) Run(run func(email string)) *MockIUserUsecase_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_GetUserByEmail_Call) Return(user *domain.User, err error) *MockIUserUsecase_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserUsecase_GetUserByEmail_Call) RunAndReturn(run func(email string) (*domain.User, error)) *MockIUserUsecase_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) Logout(userID string) error {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserUsecase_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockIUserUsecase_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - userID string
func (_e *MockIUserUsecase_Expecter) Logout(userID interface{}) *MockIUserUsecase_Logout_Call {
	return &MockIUserUsecase_Logout_Call{Call: _e.mock.On("Logout", userID)}
}

func (_c *MockIUserUsecase_Logout_Call) Run(run func(userID string)) *MockIUserUsecase_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_Logout_Call) Return(err error) *MockIUserUsecase_Logout_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserUsecase_Logout_Call) RunAndReturn(run func(userID string) error) *MockIUserUsecase_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) Register(request *domain.User) error {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIUserUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - request *domain.User
func (_e *MockIUserUsecase_Expecter) Register(request interface{}) *MockIUserUsecase_Register_Call {
	return &MockIUserUsecase_Register_Call{Call: _e.mock.On("Register", request)}
}

func (_c *MockIUserUsecase_Register_Call) Run(run func(request *domain.User)) *MockIUserUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.User
		if args[0] != nil {
			arg0 = args[0].(*domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_Register_Call) Return(err error) *MockIUserUsecase_Register_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserUsecase_Register_Call) RunAndReturn(run func(request *domain.User) error) *MockIUserUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) UpdateProfile(userID string, update domain.UserProfileUpdate, fileName string) (*domain.User, error) {
	ret := _mock.Called(userID, update, fileName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, domain.UserProfileUpdate, string) (*domain.User, error)); ok {
		return returnFunc(userID, update, fileName)
	}
	if returnFunc, ok := ret.Get(0).(func(string, domain.UserProfileUpdate, string) *domain.User); ok {
		r0 = returnFunc(userID, update, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, domain.UserProfileUpdate, string) error); ok {
		r1 = returnFunc(userID, update, fileName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserUsecase_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type MockIUserUsecase_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - userID string
//   - update domain.UserProfileUpdate
//   - fileName string
func (_e *MockIUserUsecase_Expecter) UpdateProfile(userID interface{}, update interface{}, fileName interface{}) *MockIUserUsecase_UpdateProfile_Call {
	return &MockIUserUsecase_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile", userID, update, fileName)}
}

func (_c *MockIUserUsecase_UpdateProfile_Call) Run(run func(userID string, update domain.UserProfileUpdate, fileName string)) *MockIUserUsecase_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 domain.UserProfileUpdate
		if args[1] != nil {
			arg1 = args[1].(domain.UserProfileUpdate)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_UpdateProfile_Call) Return(user *domain.User, err error) *MockIUserUsecase_UpdateProfile_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserUsecase_UpdateProfile_Call) RunAndReturn(run func(userID string, update domain.UserProfileUpdate, fileName string) (*domain.User, error)) *MockIUserUsecase_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockIUserUsecase
func (_mock *MockIUserUsecase) UpdateUser(id string, user *domain.User) (*domain.User, error) {
	ret := _mock.Called(id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, *domain.User) (*domain.User, error)); ok {
		return returnFunc(id, user)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *domain.User) *domain.User); ok {
		r0 = returnFunc(id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *domain.User) error); ok {
		r1 = returnFunc(id, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserUsecase_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockIUserUsecase_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - id string
//   - user *domain.User
func (_e *MockIUserUsecase_Expecter) UpdateUser(id interface{}, user interface{}) *MockIUserUsecase_UpdateUser_Call {
	return &MockIUserUsecase_UpdateUser_Call{Call: _e.mock.On("UpdateUser", id, user)}
}

func (_c *MockIUserUsecase_UpdateUser_Call) Run(run func(id string, user *domain.User)) *MockIUserUsecase_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *domain.User
		if args[1] != nil {
			arg1 = args[1].(*domain.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserUsecase_UpdateUser_Call) Return(user1 *domain.User, err error) *MockIUserUsecase_UpdateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockIUserUsecase_UpdateUser_Call) RunAndReturn(run func(id string, user *domain.User) (*domain.User, error)) *MockIUserUsecase_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
