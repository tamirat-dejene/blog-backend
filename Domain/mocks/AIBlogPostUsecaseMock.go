// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAIBlogPostUsecase creates a new instance of MockAIBlogPostUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAIBlogPostUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAIBlogPostUsecase {
	mock := &MockAIBlogPostUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAIBlogPostUsecase is an autogenerated mock type for the AIBlogPostUsecase type
type MockAIBlogPostUsecase struct {
	mock.Mock
}

type MockAIBlogPostUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAIBlogPostUsecase) EXPECT() *MockAIBlogPostUsecase_Expecter {
	return &MockAIBlogPostUsecase_Expecter{mock: &_m.Mock}
}

// GeneratePost provides a mock function for the type MockAIBlogPostUsecase
func (_mock *MockAIBlogPostUsecase) GeneratePost(ctx context.Context, req domain.AIBlogPostGenerate) (*domain.AIBlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePost")
	}

	var r0 *domain.AIBlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AIBlogPostGenerate) (*domain.AIBlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AIBlogPostGenerate) *domain.AIBlogPost); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AIBlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AIBlogPostGenerate) *domain.DomainError); ok {
		r1 = returnFunc(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockAIBlogPostUsecase_GeneratePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePost'
type MockAIBlogPostUsecase_GeneratePost_Call struct {
	*mock.Call
}

// GeneratePost is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.AIBlogPostGenerate
func (_e *MockAIBlogPostUsecase_Expecter) GeneratePost(ctx interface{}, req interface{}) *MockAIBlogPostUsecase_GeneratePost_Call {
	return &MockAIBlogPostUsecase_GeneratePost_Call{Call: _e.mock.On("GeneratePost", ctx, req)}
}

func (_c *MockAIBlogPostUsecase_GeneratePost_Call) Run(run func(ctx context.Context, req domain.AIBlogPostGenerate)) *MockAIBlogPostUsecase_GeneratePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AIBlogPostGenerate
		if args[1] != nil {
			arg1 = args[1].(domain.AIBlogPostGenerate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAIBlogPostUsecase_GeneratePost_Call) Return(aIBlogPost *domain.AIBlogPost, domainError *domain.DomainError) *MockAIBlogPostUsecase_GeneratePost_Call {
	_c.Call.Return(aIBlogPost, domainError)
	return _c
}

func (_c *MockAIBlogPostUsecase_GeneratePost_Call) RunAndReturn(run func(ctx context.Context, req domain.AIBlogPostGenerate) (*domain.AIBlogPost, *domain.DomainError)) *MockAIBlogPostUsecase_GeneratePost_Call {
	_c.Call.Return(run)
	return _c
}
