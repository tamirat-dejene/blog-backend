// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIRefreshTokenRepository creates a new instance of MockIRefreshTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRefreshTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRefreshTokenRepository {
	mock := &MockIRefreshTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIRefreshTokenRepository is an autogenerated mock type for the IRefreshTokenRepository type
type MockIRefreshTokenRepository struct {
	mock.Mock
}

type MockIRefreshTokenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRefreshTokenRepository) EXPECT() *MockIRefreshTokenRepository_Expecter {
	return &MockIRefreshTokenRepository_Expecter{mock: &_m.Mock}
}

// DeleteByUserID provides a mock function for the type MockIRefreshTokenRepository
func (_mock *MockIRefreshTokenRepository) DeleteByUserID(ctx context.Context, userID string) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRefreshTokenRepository_DeleteByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUserID'
type MockIRefreshTokenRepository_DeleteByUserID_Call struct {
	*mock.Call
}

// DeleteByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockIRefreshTokenRepository_Expecter) DeleteByUserID(ctx interface{}, userID interface{}) *MockIRefreshTokenRepository_DeleteByUserID_Call {
	return &MockIRefreshTokenRepository_DeleteByUserID_Call{Call: _e.mock.On("DeleteByUserID", ctx, userID)}
}

func (_c *MockIRefreshTokenRepository_DeleteByUserID_Call) Run(run func(ctx context.Context, userID string)) *MockIRefreshTokenRepository_DeleteByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenRepository_DeleteByUserID_Call) Return(err error) *MockIRefreshTokenRepository_DeleteByUserID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRefreshTokenRepository_DeleteByUserID_Call) RunAndReturn(run func(ctx context.Context, userID string) error) *MockIRefreshTokenRepository_DeleteByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByToken provides a mock function for the type MockIRefreshTokenRepository
func (_mock *MockIRefreshTokenRepository) FindByToken(ctx context.Context, token string) (*domain.RefreshToken, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for FindByToken")
	}

	var r0 *domain.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.RefreshToken, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.RefreshToken); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RefreshToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRefreshTokenRepository_FindByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByToken'
type MockIRefreshTokenRepository_FindByToken_Call struct {
	*mock.Call
}

// FindByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockIRefreshTokenRepository_Expecter) FindByToken(ctx interface{}, token interface{}) *MockIRefreshTokenRepository_FindByToken_Call {
	return &MockIRefreshTokenRepository_FindByToken_Call{Call: _e.mock.On("FindByToken", ctx, token)}
}

func (_c *MockIRefreshTokenRepository_FindByToken_Call) Run(run func(ctx context.Context, token string)) *MockIRefreshTokenRepository_FindByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenRepository_FindByToken_Call) Return(refreshToken *domain.RefreshToken, err error) *MockIRefreshTokenRepository_FindByToken_Call {
	_c.Call.Return(refreshToken, err)
	return _c
}

func (_c *MockIRefreshTokenRepository_FindByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*domain.RefreshToken, error)) *MockIRefreshTokenRepository_FindByToken_Call {
	_c.Call.Return(run)
	return _c
}

// FindTokenByUserID provides a mock function for the type MockIRefreshTokenRepository
func (_mock *MockIRefreshTokenRepository) FindTokenByUserID(ctx context.Context, token string) (*domain.RefreshToken, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for FindTokenByUserID")
	}

	var r0 *domain.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.RefreshToken, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.RefreshToken); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RefreshToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRefreshTokenRepository_FindTokenByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTokenByUserID'
type MockIRefreshTokenRepository_FindTokenByUserID_Call struct {
	*mock.Call
}

// FindTokenByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockIRefreshTokenRepository_Expecter) FindTokenByUserID(ctx interface{}, token interface{}) *MockIRefreshTokenRepository_FindTokenByUserID_Call {
	return &MockIRefreshTokenRepository_FindTokenByUserID_Call{Call: _e.mock.On("FindTokenByUserID", ctx, token)}
}

func (_c *MockIRefreshTokenRepository_FindTokenByUserID_Call) Run(run func(ctx context.Context, token string)) *MockIRefreshTokenRepository_FindTokenByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenRepository_FindTokenByUserID_Call) Return(refreshToken *domain.RefreshToken, err error) *MockIRefreshTokenRepository_FindTokenByUserID_Call {
	_c.Call.Return(refreshToken, err)
	return _c
}

func (_c *MockIRefreshTokenRepository_FindTokenByUserID_Call) RunAndReturn(run func(ctx context.Context, token string) (*domain.RefreshToken, error)) *MockIRefreshTokenRepository_FindTokenByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceTokenByUserID provides a mock function for the type MockIRefreshTokenRepository
func (_mock *MockIRefreshTokenRepository) ReplaceTokenByUserID(ctx context.Context, token *domain.RefreshToken) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceTokenByUserID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.RefreshToken) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRefreshTokenRepository_ReplaceTokenByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceTokenByUserID'
type MockIRefreshTokenRepository_ReplaceTokenByUserID_Call struct {
	*mock.Call
}

// ReplaceTokenByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - token *domain.RefreshToken
func (_e *MockIRefreshTokenRepository_Expecter) ReplaceTokenByUserID(ctx interface{}, token interface{}) *MockIRefreshTokenRepository_ReplaceTokenByUserID_Call {
	return &MockIRefreshTokenRepository_ReplaceTokenByUserID_Call{Call: _e.mock.On("ReplaceTokenByUserID", ctx, token)}
}

func (_c *MockIRefreshTokenRepository_ReplaceTokenByUserID_Call) Run(run func(ctx context.Context, token *domain.RefreshToken)) *MockIRefreshTokenRepository_ReplaceTokenByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.RefreshToken
		if args[1] != nil {
			arg1 = args[1].(*domain.RefreshToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenRepository_ReplaceTokenByUserID_Call) Return(err error) *MockIRefreshTokenRepository_ReplaceTokenByUserID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRefreshTokenRepository_ReplaceTokenByUserID_Call) RunAndReturn(run func(ctx context.Context, token *domain.RefreshToken) error) *MockIRefreshTokenRepository_ReplaceTokenByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function for the type MockIRefreshTokenRepository
func (_mock *MockIRefreshTokenRepository) RevokeToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRefreshTokenRepository_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type MockIRefreshTokenRepository_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockIRefreshTokenRepository_Expecter) RevokeToken(ctx interface{}, token interface{}) *MockIRefreshTokenRepository_RevokeToken_Call {
	return &MockIRefreshTokenRepository_RevokeToken_Call{Call: _e.mock.On("RevokeToken", ctx, token)}
}

func (_c *MockIRefreshTokenRepository_RevokeToken_Call) Run(run func(ctx context.Context, token string)) *MockIRefreshTokenRepository_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenRepository_RevokeToken_Call) Return(err error) *MockIRefreshTokenRepository_RevokeToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRefreshTokenRepository_RevokeToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockIRefreshTokenRepository_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockIRefreshTokenRepository
func (_mock *MockIRefreshTokenRepository) Save(ctx context.Context, token *domain.RefreshToken) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.RefreshToken) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRefreshTokenRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockIRefreshTokenRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - token *domain.RefreshToken
func (_e *MockIRefreshTokenRepository_Expecter) Save(ctx interface{}, token interface{}) *MockIRefreshTokenRepository_Save_Call {
	return &MockIRefreshTokenRepository_Save_Call{Call: _e.mock.On("Save", ctx, token)}
}

func (_c *MockIRefreshTokenRepository_Save_Call) Run(run func(ctx context.Context, token *domain.RefreshToken)) *MockIRefreshTokenRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.RefreshToken
		if args[1] != nil {
			arg1 = args[1].(*domain.RefreshToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenRepository_Save_Call) Return(err error) *MockIRefreshTokenRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRefreshTokenRepository_Save_Call) RunAndReturn(run func(ctx context.Context, token *domain.RefreshToken) error) *MockIRefreshTokenRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
