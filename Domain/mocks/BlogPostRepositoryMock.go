// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockBlogPostRepository creates a new instance of MockBlogPostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlogPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlogPostRepository {
	mock := &MockBlogPostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlogPostRepository is an autogenerated mock type for the BlogPostRepository type
type MockBlogPostRepository struct {
	mock.Mock
}

type MockBlogPostRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlogPostRepository) EXPECT() *MockBlogPostRepository_Expecter {
	return &MockBlogPostRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockBlogPostRepository
func (_mock *MockBlogPostRepository) Create(ctx context.Context, blog *domain.BlogPost) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogPost) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, blog)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogPost) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.BlogPost) *domain.DomainError); ok {
		r1 = returnFunc(ctx, blog)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBlogPostRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - blog *domain.BlogPost
func (_e *MockBlogPostRepository_Expecter) Create(ctx interface{}, blog interface{}) *MockBlogPostRepository_Create_Call {
	return &MockBlogPostRepository_Create_Call{Call: _e.mock.On("Create", ctx, blog)}
}

func (_c *MockBlogPostRepository_Create_Call) Run(run func(ctx context.Context, blog *domain.BlogPost)) *MockBlogPostRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.BlogPost
		if args[1] != nil {
			arg1 = args[1].(*domain.BlogPost)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostRepository_Create_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostRepository_Create_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostRepository_Create_Call) RunAndReturn(run func(ctx context.Context, blog *domain.BlogPost) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockBlogPostRepository
func (_mock *MockBlogPostRepository) Delete(ctx context.Context, id string) *domain.DomainError {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.DomainError); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DomainError)
		}
	}
	return r0
}

// MockBlogPostRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBlogPostRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBlogPostRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockBlogPostRepository_Delete_Call {
	return &MockBlogPostRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockBlogPostRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockBlogPostRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostRepository_Delete_Call) Return(domainError *domain.DomainError) *MockBlogPostRepository_Delete_Call {
	_c.Call.Return(domainError)
	return _c
}

func (_c *MockBlogPostRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) *domain.DomainError) *MockBlogPostRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockBlogPostRepository
func (_mock *MockBlogPostRepository) Get(ctx context.Context, filter *domain.BlogPostFilter) ([]domain.BlogPostsPage, *string, *domain.DomainError) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.BlogPostsPage
	var r1 *string
	var r2 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogPostFilter) ([]domain.BlogPostsPage, *string, *domain.DomainError)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogPostFilter) []domain.BlogPostsPage); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BlogPostsPage)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.BlogPostFilter) *string); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *domain.BlogPostFilter) *domain.DomainError); ok {
		r2 = returnFunc(ctx, filter)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*domain.DomainError)
		}
	}
	return r0, r1, r2
}

// MockBlogPostRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBlogPostRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.BlogPostFilter
func (_e *MockBlogPostRepository_Expecter) Get(ctx interface{}, filter interface{}) *MockBlogPostRepository_Get_Call {
	return &MockBlogPostRepository_Get_Call{Call: _e.mock.On("Get", ctx, filter)}
}

func (_c *MockBlogPostRepository_Get_Call) Run(run func(ctx context.Context, filter *domain.BlogPostFilter)) *MockBlogPostRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.BlogPostFilter
		if args[1] != nil {
			arg1 = args[1].(*domain.BlogPostFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostRepository_Get_Call) Return(blogPostsPages []domain.BlogPostsPage, s *string, domainError *domain.DomainError) *MockBlogPostRepository_Get_Call {
	_c.Call.Return(blogPostsPages, s, domainError)
	return _c
}

func (_c *MockBlogPostRepository_Get_Call) RunAndReturn(run func(ctx context.Context, filter *domain.BlogPostFilter) ([]domain.BlogPostsPage, *string, *domain.DomainError)) *MockBlogPostRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlogByID provides a mock function for the type MockBlogPostRepository
func (_mock *MockBlogPostRepository) GetBlogByID(ctx context.Context, id string) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *domain.DomainError); ok {
		r1 = returnFunc(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostRepository_GetBlogByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlogByID'
type MockBlogPostRepository_GetBlogByID_Call struct {
	*mock.Call
}

// GetBlogByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBlogPostRepository_Expecter) GetBlogByID(ctx interface{}, id interface{}) *MockBlogPostRepository_GetBlogByID_Call {
	return &MockBlogPostRepository_GetBlogByID_Call{Call: _e.mock.On("GetBlogByID", ctx, id)}
}

func (_c *MockBlogPostRepository_GetBlogByID_Call) Run(run func(ctx context.Context, id string)) *MockBlogPostRepository_GetBlogByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostRepository_GetBlogByID_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostRepository_GetBlogByID_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostRepository_GetBlogByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostRepository_GetBlogByID_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementViewCount provides a mock function for the type MockBlogPostRepository
func (_mock *MockBlogPostRepository) IncrementViewCount(ctx context.Context, id string) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IncrementViewCount")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *domain.DomainError); ok {
		r1 = returnFunc(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostRepository_IncrementViewCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementViewCount'
type MockBlogPostRepository_IncrementViewCount_Call struct {
	*mock.Call
}

// IncrementViewCount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBlogPostRepository_Expecter) IncrementViewCount(ctx interface{}, id interface{}) *MockBlogPostRepository_IncrementViewCount_Call {
	return &MockBlogPostRepository_IncrementViewCount_Call{Call: _e.mock.On("IncrementViewCount", ctx, id)}
}

func (_c *MockBlogPostRepository_IncrementViewCount_Call) Run(run func(ctx context.Context, id string)) *MockBlogPostRepository_IncrementViewCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostRepository_IncrementViewCount_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostRepository_IncrementViewCount_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostRepository_IncrementViewCount_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostRepository_IncrementViewCount_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshPopularityScore provides a mock function for the type MockBlogPostRepository
func (_mock *MockBlogPostRepository) RefreshPopularityScore(ctx context.Context, id string) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RefreshPopularityScore")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *domain.DomainError); ok {
		r1 = returnFunc(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostRepository_RefreshPopularityScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshPopularityScore'
type MockBlogPostRepository_RefreshPopularityScore_Call struct {
	*mock.Call
}

// RefreshPopularityScore is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBlogPostRepository_Expecter) RefreshPopularityScore(ctx interface{}, id interface{}) *MockBlogPostRepository_RefreshPopularityScore_Call {
	return &MockBlogPostRepository_RefreshPopularityScore_Call{Call: _e.mock.On("RefreshPopularityScore", ctx, id)}
}

func (_c *MockBlogPostRepository_RefreshPopularityScore_Call) Run(run func(ctx context.Context, id string)) *MockBlogPostRepository_RefreshPopularityScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostRepository_RefreshPopularityScore_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostRepository_RefreshPopularityScore_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostRepository_RefreshPopularityScore_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostRepository_RefreshPopularityScore_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockBlogPostRepository
func (_mock *MockBlogPostRepository) Update(ctx context.Context, id string, blog domain.BlogPost) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, id, blog)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.BlogPost) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, id, blog)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.BlogPost) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, id, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, domain.BlogPost) *domain.DomainError); ok {
		r1 = returnFunc(ctx, id, blog)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBlogPostRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - blog domain.BlogPost
func (_e *MockBlogPostRepository_Expecter) Update(ctx interface{}, id interface{}, blog interface{}) *MockBlogPostRepository_Update_Call {
	return &MockBlogPostRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, blog)}
}

func (_c *MockBlogPostRepository_Update_Call) Run(run func(ctx context.Context, id string, blog domain.BlogPost)) *MockBlogPostRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.BlogPost
		if args[2] != nil {
			arg2 = args[2].(domain.BlogPost)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlogPostRepository_Update_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostRepository_Update_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id string, blog domain.BlogPost) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCommentCount provides a mock function for the type MockBlogPostRepository
func (_mock *MockBlogPostRepository) UpdateCommentCount(ctx context.Context, id string, increment bool) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, id, increment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCommentCount")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, id, increment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, id, increment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) *domain.DomainError); ok {
		r1 = returnFunc(ctx, id, increment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostRepository_UpdateCommentCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCommentCount'
type MockBlogPostRepository_UpdateCommentCount_Call struct {
	*mock.Call
}

// UpdateCommentCount is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - increment bool
func (_e *MockBlogPostRepository_Expecter) UpdateCommentCount(ctx interface{}, id interface{}, increment interface{}) *MockBlogPostRepository_UpdateCommentCount_Call {
	return &MockBlogPostRepository_UpdateCommentCount_Call{Call: _e.mock.On("UpdateCommentCount", ctx, id, increment)}
}

func (_c *MockBlogPostRepository_UpdateCommentCount_Call) Run(run func(ctx context.Context, id string, increment bool)) *MockBlogPostRepository_UpdateCommentCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlogPostRepository_UpdateCommentCount_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostRepository_UpdateCommentCount_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostRepository_UpdateCommentCount_Call) RunAndReturn(run func(ctx context.Context, id string, increment bool) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostRepository_UpdateCommentCount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReactionCount provides a mock function for the type MockBlogPostRepository
func (_mock *MockBlogPostRepository) UpdateReactionCount(ctx context.Context, is_like bool, id string, increment bool) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, is_like, id, increment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReactionCount")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool, string, bool) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, is_like, id, increment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bool, string, bool) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, is_like, id, increment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bool, string, bool) *domain.DomainError); ok {
		r1 = returnFunc(ctx, is_like, id, increment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostRepository_UpdateReactionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReactionCount'
type MockBlogPostRepository_UpdateReactionCount_Call struct {
	*mock.Call
}

// UpdateReactionCount is a helper method to define mock.On call
//   - ctx context.Context
//   - is_like bool
//   - id string
//   - increment bool
func (_e *MockBlogPostRepository_Expecter) UpdateReactionCount(ctx interface{}, is_like interface{}, id interface{}, increment interface{}) *MockBlogPostRepository_UpdateReactionCount_Call {
	return &MockBlogPostRepository_UpdateReactionCount_Call{Call: _e.mock.On("UpdateReactionCount", ctx, is_like, id, increment)}
}

func (_c *MockBlogPostRepository_UpdateReactionCount_Call) Run(run func(ctx context.Context, is_like bool, id string, increment bool)) *MockBlogPostRepository_UpdateReactionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBlogPostRepository_UpdateReactionCount_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostRepository_UpdateReactionCount_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostRepository_UpdateReactionCount_Call) RunAndReturn(run func(ctx context.Context, is_like bool, id string, increment bool) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostRepository_UpdateReactionCount_Call {
	_c.Call.Return(run)
	return _c
}
