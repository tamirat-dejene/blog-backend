// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIOTPUsecase creates a new instance of MockIOTPUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOTPUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOTPUsecase {
	mock := &MockIOTPUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOTPUsecase is an autogenerated mock type for the IOTPUsecase type
type MockIOTPUsecase struct {
	mock.Mock
}

type MockIOTPUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOTPUsecase) EXPECT() *MockIOTPUsecase_Expecter {
	return &MockIOTPUsecase_Expecter{mock: &_m.Mock}
}

// DeleteByID provides a mock function for the type MockIOTPUsecase
func (_mock *MockIOTPUsecase) DeleteByID(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOTPUsecase_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockIOTPUsecase_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - id string
func (_e *MockIOTPUsecase_Expecter) DeleteByID(id interface{}) *MockIOTPUsecase_DeleteByID_Call {
	return &MockIOTPUsecase_DeleteByID_Call{Call: _e.mock.On("DeleteByID", id)}
}

func (_c *MockIOTPUsecase_DeleteByID_Call) Run(run func(id string)) *MockIOTPUsecase_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIOTPUsecase_DeleteByID_Call) Return(err error) *MockIOTPUsecase_DeleteByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOTPUsecase_DeleteByID_Call) RunAndReturn(run func(id string) error) *MockIOTPUsecase_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// RequestOTP provides a mock function for the type MockIOTPUsecase
func (_mock *MockIOTPUsecase) RequestOTP(email string) error {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for RequestOTP")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOTPUsecase_RequestOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestOTP'
type MockIOTPUsecase_RequestOTP_Call struct {
	*mock.Call
}

// RequestOTP is a helper method to define mock.On call
//   - email string
func (_e *MockIOTPUsecase_Expecter) RequestOTP(email interface{}) *MockIOTPUsecase_RequestOTP_Call {
	return &MockIOTPUsecase_RequestOTP_Call{Call: _e.mock.On("RequestOTP", email)}
}

func (_c *MockIOTPUsecase_RequestOTP_Call) Run(run func(email string)) *MockIOTPUsecase_RequestOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIOTPUsecase_RequestOTP_Call) Return(err error) *MockIOTPUsecase_RequestOTP_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOTPUsecase_RequestOTP_Call) RunAndReturn(run func(email string) error) *MockIOTPUsecase_RequestOTP_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyOTP provides a mock function for the type MockIOTPUsecase
func (_mock *MockIOTPUsecase) VerifyOTP(email string, code string) (*domain.OTP, error) {
	ret := _mock.Called(email, code)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 *domain.OTP
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*domain.OTP, error)); ok {
		return returnFunc(email, code)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *domain.OTP); ok {
		r0 = returnFunc(email, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OTP)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(email, code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOTPUsecase_VerifyOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyOTP'
type MockIOTPUsecase_VerifyOTP_Call struct {
	*mock.Call
}

// VerifyOTP is a helper method to define mock.On call
//   - email string
//   - code string
func (_e *MockIOTPUsecase_Expecter) VerifyOTP(email interface{}, code interface{}) *MockIOTPUsecase_VerifyOTP_Call {
	return &MockIOTPUsecase_VerifyOTP_Call{Call: _e.mock.On("VerifyOTP", email, code)}
}

func (_c *MockIOTPUsecase_VerifyOTP_Call) Run(run func(email string, code string)) *MockIOTPUsecase_VerifyOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOTPUsecase_VerifyOTP_Call) Return(oTP *domain.OTP, err error) *MockIOTPUsecase_VerifyOTP_Call {
	_c.Call.Return(oTP, err)
	return _c
}

func (_c *MockIOTPUsecase_VerifyOTP_Call) RunAndReturn(run func(email string, code string) (*domain.OTP, error)) *MockIOTPUsecase_VerifyOTP_Call {
	_c.Call.Return(run)
	return _c
}
