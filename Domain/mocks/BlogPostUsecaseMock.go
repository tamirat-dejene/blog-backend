// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockBlogPostUsecase creates a new instance of MockBlogPostUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlogPostUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlogPostUsecase {
	mock := &MockBlogPostUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlogPostUsecase is an autogenerated mock type for the BlogPostUsecase type
type MockBlogPostUsecase struct {
	mock.Mock
}

type MockBlogPostUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlogPostUsecase) EXPECT() *MockBlogPostUsecase_Expecter {
	return &MockBlogPostUsecase_Expecter{mock: &_m.Mock}
}

// CreateBlog provides a mock function for the type MockBlogPostUsecase
func (_mock *MockBlogPostUsecase) CreateBlog(ctx context.Context, blog *domain.BlogPost) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogPost) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, blog)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogPost) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.BlogPost) *domain.DomainError); ok {
		r1 = returnFunc(ctx, blog)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostUsecase_CreateBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBlog'
type MockBlogPostUsecase_CreateBlog_Call struct {
	*mock.Call
}

// CreateBlog is a helper method to define mock.On call
//   - ctx context.Context
//   - blog *domain.BlogPost
func (_e *MockBlogPostUsecase_Expecter) CreateBlog(ctx interface{}, blog interface{}) *MockBlogPostUsecase_CreateBlog_Call {
	return &MockBlogPostUsecase_CreateBlog_Call{Call: _e.mock.On("CreateBlog", ctx, blog)}
}

func (_c *MockBlogPostUsecase_CreateBlog_Call) Run(run func(ctx context.Context, blog *domain.BlogPost)) *MockBlogPostUsecase_CreateBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.BlogPost
		if args[1] != nil {
			arg1 = args[1].(*domain.BlogPost)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostUsecase_CreateBlog_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostUsecase_CreateBlog_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostUsecase_CreateBlog_Call) RunAndReturn(run func(ctx context.Context, blog *domain.BlogPost) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostUsecase_CreateBlog_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBlog provides a mock function for the type MockBlogPostUsecase
func (_mock *MockBlogPostUsecase) DeleteBlog(ctx context.Context, id string) *domain.DomainError {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.DomainError); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DomainError)
		}
	}
	return r0
}

// MockBlogPostUsecase_DeleteBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBlog'
type MockBlogPostUsecase_DeleteBlog_Call struct {
	*mock.Call
}

// DeleteBlog is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBlogPostUsecase_Expecter) DeleteBlog(ctx interface{}, id interface{}) *MockBlogPostUsecase_DeleteBlog_Call {
	return &MockBlogPostUsecase_DeleteBlog_Call{Call: _e.mock.On("DeleteBlog", ctx, id)}
}

func (_c *MockBlogPostUsecase_DeleteBlog_Call) Run(run func(ctx context.Context, id string)) *MockBlogPostUsecase_DeleteBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostUsecase_DeleteBlog_Call) Return(domainError *domain.DomainError) *MockBlogPostUsecase_DeleteBlog_Call {
	_c.Call.Return(domainError)
	return _c
}

func (_c *MockBlogPostUsecase_DeleteBlog_Call) RunAndReturn(run func(ctx context.Context, id string) *domain.DomainError) *MockBlogPostUsecase_DeleteBlog_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlogByID provides a mock function for the type MockBlogPostUsecase
func (_mock *MockBlogPostUsecase) GetBlogByID(ctx context.Context, id string) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *domain.DomainError); ok {
		r1 = returnFunc(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostUsecase_GetBlogByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlogByID'
type MockBlogPostUsecase_GetBlogByID_Call struct {
	*mock.Call
}

// GetBlogByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBlogPostUsecase_Expecter) GetBlogByID(ctx interface{}, id interface{}) *MockBlogPostUsecase_GetBlogByID_Call {
	return &MockBlogPostUsecase_GetBlogByID_Call{Call: _e.mock.On("GetBlogByID", ctx, id)}
}

func (_c *MockBlogPostUsecase_GetBlogByID_Call) Run(run func(ctx context.Context, id string)) *MockBlogPostUsecase_GetBlogByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostUsecase_GetBlogByID_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostUsecase_GetBlogByID_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostUsecase_GetBlogByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostUsecase_GetBlogByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlogs provides a mock function for the type MockBlogPostUsecase
func (_mock *MockBlogPostUsecase) GetBlogs(ctx context.Context, filter *domain.BlogPostFilter) ([]domain.BlogPostsPage, *domain.DomainError) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogs")
	}

	var r0 []domain.BlogPostsPage
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogPostFilter) ([]domain.BlogPostsPage, *domain.DomainError)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogPostFilter) []domain.BlogPostsPage); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BlogPostsPage)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.BlogPostFilter) *domain.DomainError); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostUsecase_GetBlogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlogs'
type MockBlogPostUsecase_GetBlogs_Call struct {
	*mock.Call
}

// GetBlogs is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.BlogPostFilter
func (_e *MockBlogPostUsecase_Expecter) GetBlogs(ctx interface{}, filter interface{}) *MockBlogPostUsecase_GetBlogs_Call {
	return &MockBlogPostUsecase_GetBlogs_Call{Call: _e.mock.On("GetBlogs", ctx, filter)}
}

func (_c *MockBlogPostUsecase_GetBlogs_Call) Run(run func(ctx context.Context, filter *domain.BlogPostFilter)) *MockBlogPostUsecase_GetBlogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.BlogPostFilter
		if args[1] != nil {
			arg1 = args[1].(*domain.BlogPostFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogPostUsecase_GetBlogs_Call) Return(blogPostsPages []domain.BlogPostsPage, domainError *domain.DomainError) *MockBlogPostUsecase_GetBlogs_Call {
	_c.Call.Return(blogPostsPages, domainError)
	return _c
}

func (_c *MockBlogPostUsecase_GetBlogs_Call) RunAndReturn(run func(ctx context.Context, filter *domain.BlogPostFilter) ([]domain.BlogPostsPage, *domain.DomainError)) *MockBlogPostUsecase_GetBlogs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBlog provides a mock function for the type MockBlogPostUsecase
func (_mock *MockBlogPostUsecase) UpdateBlog(ctx context.Context, id string, blog domain.BlogPost) (*domain.BlogPost, *domain.DomainError) {
	ret := _mock.Called(ctx, id, blog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 *domain.BlogPost
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.BlogPost) (*domain.BlogPost, *domain.DomainError)); ok {
		return returnFunc(ctx, id, blog)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.BlogPost) *domain.BlogPost); ok {
		r0 = returnFunc(ctx, id, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogPost)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, domain.BlogPost) *domain.DomainError); ok {
		r1 = returnFunc(ctx, id, blog)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogPostUsecase_UpdateBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBlog'
type MockBlogPostUsecase_UpdateBlog_Call struct {
	*mock.Call
}

// UpdateBlog is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - blog domain.BlogPost
func (_e *MockBlogPostUsecase_Expecter) UpdateBlog(ctx interface{}, id interface{}, blog interface{}) *MockBlogPostUsecase_UpdateBlog_Call {
	return &MockBlogPostUsecase_UpdateBlog_Call{Call: _e.mock.On("UpdateBlog", ctx, id, blog)}
}

func (_c *MockBlogPostUsecase_UpdateBlog_Call) Run(run func(ctx context.Context, id string, blog domain.BlogPost)) *MockBlogPostUsecase_UpdateBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 domain.BlogPost
		if args[2] != nil {
			arg2 = args[2].(domain.BlogPost)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlogPostUsecase_UpdateBlog_Call) Return(blogPost *domain.BlogPost, domainError *domain.DomainError) *MockBlogPostUsecase_UpdateBlog_Call {
	_c.Call.Return(blogPost, domainError)
	return _c
}

func (_c *MockBlogPostUsecase_UpdateBlog_Call) RunAndReturn(run func(ctx context.Context, id string, blog domain.BlogPost) (*domain.BlogPost, *domain.DomainError)) *MockBlogPostUsecase_UpdateBlog_Call {
	_c.Call.Return(run)
	return _c
}
