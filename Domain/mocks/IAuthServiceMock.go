// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"g6/blog-api/Domain"

	"github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIAuthService creates a new instance of MockIAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthService {
	mock := &MockIAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAuthService is an autogenerated mock type for the IAuthService type
type MockIAuthService struct {
	mock.Mock
}

type MockIAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthService) EXPECT() *MockIAuthService_Expecter {
	return &MockIAuthService_Expecter{mock: &_m.Mock}
}

// GenerateTokens provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) GenerateTokens(user domain.User) (domain.RefreshTokenResponse, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokens")
	}

	var r0 domain.RefreshTokenResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.User) (domain.RefreshTokenResponse, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.User) domain.RefreshTokenResponse); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Get(0).(domain.RefreshTokenResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAuthService_GenerateTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateTokens'
type MockIAuthService_GenerateTokens_Call struct {
	*mock.Call
}

// GenerateTokens is a helper method to define mock.On call
//   - user domain.User
func (_e *MockIAuthService_Expecter) GenerateTokens(user interface{}) *MockIAuthService_GenerateTokens_Call {
	return &MockIAuthService_GenerateTokens_Call{Call: _e.mock.On("GenerateTokens", user)}
}

func (_c *MockIAuthService_GenerateTokens_Call) Run(run func(user domain.User)) *MockIAuthService_GenerateTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.User
		if args[0] != nil {
			arg0 = args[0].(domain.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIAuthService_GenerateTokens_Call) Return(refreshTokenResponse domain.RefreshTokenResponse, err error) *MockIAuthService_GenerateTokens_Call {
	_c.Call.Return(refreshTokenResponse, err)
	return _c
}

func (_c *MockIAuthService_GenerateTokens_Call) RunAndReturn(run func(user domain.User) (domain.RefreshTokenResponse, error)) *MockIAuthService_GenerateTokens_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRefreshToken provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) ValidateRefreshToken(token string) (jwt.MapClaims, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 jwt.MapClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (jwt.MapClaims, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) jwt.MapClaims); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.MapClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAuthService_ValidateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRefreshToken'
type MockIAuthService_ValidateRefreshToken_Call struct {
	*mock.Call
}

// ValidateRefreshToken is a helper method to define mock.On call
//   - token string
func (_e *MockIAuthService_Expecter) ValidateRefreshToken(token interface{}) *MockIAuthService_ValidateRefreshToken_Call {
	return &MockIAuthService_ValidateRefreshToken_Call{Call: _e.mock.On("ValidateRefreshToken", token)}
}

func (_c *MockIAuthService_ValidateRefreshToken_Call) Run(run func(token string)) *MockIAuthService_ValidateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIAuthService_ValidateRefreshToken_Call) Return(mapClaims jwt.MapClaims, err error) *MockIAuthService_ValidateRefreshToken_Call {
	_c.Call.Return(mapClaims, err)
	return _c
}

func (_c *MockIAuthService_ValidateRefreshToken_Call) RunAndReturn(run func(token string) (jwt.MapClaims, error)) *MockIAuthService_ValidateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) ValidateToken(tokenString string) (jwt.MapClaims, error) {
	ret := _mock.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 jwt.MapClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (jwt.MapClaims, error)); ok {
		return returnFunc(tokenString)
	}
	if returnFunc, ok := ret.Get(0).(func(string) jwt.MapClaims); ok {
		r0 = returnFunc(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.MapClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(tokenString)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAuthService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockIAuthService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockIAuthService_Expecter) ValidateToken(tokenString interface{}) *MockIAuthService_ValidateToken_Call {
	return &MockIAuthService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", tokenString)}
}

func (_c *MockIAuthService_ValidateToken_Call) Run(run func(tokenString string)) *MockIAuthService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIAuthService_ValidateToken_Call) Return(mapClaims jwt.MapClaims, err error) *MockIAuthService_ValidateToken_Call {
	_c.Call.Return(mapClaims, err)
	return _c
}

func (_c *MockIAuthService_ValidateToken_Call) RunAndReturn(run func(tokenString string) (jwt.MapClaims, error)) *MockIAuthService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
