// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockIPasswordResetUsecase creates a new instance of MockIPasswordResetUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPasswordResetUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPasswordResetUsecase {
	mock := &MockIPasswordResetUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIPasswordResetUsecase is an autogenerated mock type for the IPasswordResetUsecase type
type MockIPasswordResetUsecase struct {
	mock.Mock
}

type MockIPasswordResetUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPasswordResetUsecase) EXPECT() *MockIPasswordResetUsecase_Expecter {
	return &MockIPasswordResetUsecase_Expecter{mock: &_m.Mock}
}

// RequestReset provides a mock function for the type MockIPasswordResetUsecase
func (_mock *MockIPasswordResetUsecase) RequestReset(email string) error {
	ret := _mock.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for RequestReset")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIPasswordResetUsecase_RequestReset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestReset'
type MockIPasswordResetUsecase_RequestReset_Call struct {
	*mock.Call
}

// RequestReset is a helper method to define mock.On call
//   - email string
func (_e *MockIPasswordResetUsecase_Expecter) RequestReset(email interface{}) *MockIPasswordResetUsecase_RequestReset_Call {
	return &MockIPasswordResetUsecase_RequestReset_Call{Call: _e.mock.On("RequestReset", email)}
}

func (_c *MockIPasswordResetUsecase_RequestReset_Call) Run(run func(email string)) *MockIPasswordResetUsecase_RequestReset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIPasswordResetUsecase_RequestReset_Call) Return(err error) *MockIPasswordResetUsecase_RequestReset_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIPasswordResetUsecase_RequestReset_Call) RunAndReturn(run func(email string) error) *MockIPasswordResetUsecase_RequestReset_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function for the type MockIPasswordResetUsecase
func (_mock *MockIPasswordResetUsecase) ResetPassword(email string, token string, newPassword string) error {
	ret := _mock.Called(email, token, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(email, token, newPassword)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIPasswordResetUsecase_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type MockIPasswordResetUsecase_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - email string
//   - token string
//   - newPassword string
func (_e *MockIPasswordResetUsecase_Expecter) ResetPassword(email interface{}, token interface{}, newPassword interface{}) *MockIPasswordResetUsecase_ResetPassword_Call {
	return &MockIPasswordResetUsecase_ResetPassword_Call{Call: _e.mock.On("ResetPassword", email, token, newPassword)}
}

func (_c *MockIPasswordResetUsecase_ResetPassword_Call) Run(run func(email string, token string, newPassword string)) *MockIPasswordResetUsecase_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIPasswordResetUsecase_ResetPassword_Call) Return(err error) *MockIPasswordResetUsecase_ResetPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIPasswordResetUsecase_ResetPassword_Call) RunAndReturn(run func(email string, token string, newPassword string) error) *MockIPasswordResetUsecase_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}
