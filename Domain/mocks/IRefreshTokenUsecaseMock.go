// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIRefreshTokenUsecase creates a new instance of MockIRefreshTokenUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRefreshTokenUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRefreshTokenUsecase {
	mock := &MockIRefreshTokenUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIRefreshTokenUsecase is an autogenerated mock type for the IRefreshTokenUsecase type
type MockIRefreshTokenUsecase struct {
	mock.Mock
}

type MockIRefreshTokenUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRefreshTokenUsecase) EXPECT() *MockIRefreshTokenUsecase_Expecter {
	return &MockIRefreshTokenUsecase_Expecter{mock: &_m.Mock}
}

// DeleteByUserID provides a mock function for the type MockIRefreshTokenUsecase
func (_mock *MockIRefreshTokenUsecase) DeleteByUserID(userID string) error {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRefreshTokenUsecase_DeleteByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUserID'
type MockIRefreshTokenUsecase_DeleteByUserID_Call struct {
	*mock.Call
}

// DeleteByUserID is a helper method to define mock.On call
//   - userID string
func (_e *MockIRefreshTokenUsecase_Expecter) DeleteByUserID(userID interface{}) *MockIRefreshTokenUsecase_DeleteByUserID_Call {
	return &MockIRefreshTokenUsecase_DeleteByUserID_Call{Call: _e.mock.On("DeleteByUserID", userID)}
}

func (_c *MockIRefreshTokenUsecase_DeleteByUserID_Call) Run(run func(userID string)) *MockIRefreshTokenUsecase_DeleteByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenUsecase_DeleteByUserID_Call) Return(err error) *MockIRefreshTokenUsecase_DeleteByUserID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRefreshTokenUsecase_DeleteByUserID_Call) RunAndReturn(run func(userID string) error) *MockIRefreshTokenUsecase_DeleteByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByToken provides a mock function for the type MockIRefreshTokenUsecase
func (_mock *MockIRefreshTokenUsecase) FindByToken(token string) (*domain.RefreshToken, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for FindByToken")
	}

	var r0 *domain.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.RefreshToken, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.RefreshToken); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RefreshToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRefreshTokenUsecase_FindByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByToken'
type MockIRefreshTokenUsecase_FindByToken_Call struct {
	*mock.Call
}

// FindByToken is a helper method to define mock.On call
//   - token string
func (_e *MockIRefreshTokenUsecase_Expecter) FindByToken(token interface{}) *MockIRefreshTokenUsecase_FindByToken_Call {
	return &MockIRefreshTokenUsecase_FindByToken_Call{Call: _e.mock.On("FindByToken", token)}
}

func (_c *MockIRefreshTokenUsecase_FindByToken_Call) Run(run func(token string)) *MockIRefreshTokenUsecase_FindByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenUsecase_FindByToken_Call) Return(refreshToken *domain.RefreshToken, err error) *MockIRefreshTokenUsecase_FindByToken_Call {
	_c.Call.Return(refreshToken, err)
	return _c
}

func (_c *MockIRefreshTokenUsecase_FindByToken_Call) RunAndReturn(run func(token string) (*domain.RefreshToken, error)) *MockIRefreshTokenUsecase_FindByToken_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserID provides a mock function for the type MockIRefreshTokenUsecase
func (_mock *MockIRefreshTokenUsecase) FindByUserID(id string) (*domain.RefreshToken, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 *domain.RefreshToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.RefreshToken, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.RefreshToken); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RefreshToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRefreshTokenUsecase_FindByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserID'
type MockIRefreshTokenUsecase_FindByUserID_Call struct {
	*mock.Call
}

// FindByUserID is a helper method to define mock.On call
//   - id string
func (_e *MockIRefreshTokenUsecase_Expecter) FindByUserID(id interface{}) *MockIRefreshTokenUsecase_FindByUserID_Call {
	return &MockIRefreshTokenUsecase_FindByUserID_Call{Call: _e.mock.On("FindByUserID", id)}
}

func (_c *MockIRefreshTokenUsecase_FindByUserID_Call) Run(run func(id string)) *MockIRefreshTokenUsecase_FindByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenUsecase_FindByUserID_Call) Return(refreshToken *domain.RefreshToken, err error) *MockIRefreshTokenUsecase_FindByUserID_Call {
	_c.Call.Return(refreshToken, err)
	return _c
}

func (_c *MockIRefreshTokenUsecase_FindByUserID_Call) RunAndReturn(run func(id string) (*domain.RefreshToken, error)) *MockIRefreshTokenUsecase_FindByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceToken provides a mock function for the type MockIRefreshTokenUsecase
func (_mock *MockIRefreshTokenUsecase) ReplaceToken(token *domain.RefreshToken) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.RefreshToken) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRefreshTokenUsecase_ReplaceToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceToken'
type MockIRefreshTokenUsecase_ReplaceToken_Call struct {
	*mock.Call
}

// ReplaceToken is a helper method to define mock.On call
//   - token *domain.RefreshToken
func (_e *MockIRefreshTokenUsecase_Expecter) ReplaceToken(token interface{}) *MockIRefreshTokenUsecase_ReplaceToken_Call {
	return &MockIRefreshTokenUsecase_ReplaceToken_Call{Call: _e.mock.On("ReplaceToken", token)}
}

func (_c *MockIRefreshTokenUsecase_ReplaceToken_Call) Run(run func(token *domain.RefreshToken)) *MockIRefreshTokenUsecase_ReplaceToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.RefreshToken
		if args[0] != nil {
			arg0 = args[0].(*domain.RefreshToken)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenUsecase_ReplaceToken_Call) Return(err error) *MockIRefreshTokenUsecase_ReplaceToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRefreshTokenUsecase_ReplaceToken_Call) RunAndReturn(run func(token *domain.RefreshToken) error) *MockIRefreshTokenUsecase_ReplaceToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokedToken provides a mock function for the type MockIRefreshTokenUsecase
func (_mock *MockIRefreshTokenUsecase) RevokedToken(token *domain.RefreshToken) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for RevokedToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.RefreshToken) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRefreshTokenUsecase_RevokedToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokedToken'
type MockIRefreshTokenUsecase_RevokedToken_Call struct {
	*mock.Call
}

// RevokedToken is a helper method to define mock.On call
//   - token *domain.RefreshToken
func (_e *MockIRefreshTokenUsecase_Expecter) RevokedToken(token interface{}) *MockIRefreshTokenUsecase_RevokedToken_Call {
	return &MockIRefreshTokenUsecase_RevokedToken_Call{Call: _e.mock.On("RevokedToken", token)}
}

func (_c *MockIRefreshTokenUsecase_RevokedToken_Call) Run(run func(token *domain.RefreshToken)) *MockIRefreshTokenUsecase_RevokedToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.RefreshToken
		if args[0] != nil {
			arg0 = args[0].(*domain.RefreshToken)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenUsecase_RevokedToken_Call) Return(err error) *MockIRefreshTokenUsecase_RevokedToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRefreshTokenUsecase_RevokedToken_Call) RunAndReturn(run func(token *domain.RefreshToken) error) *MockIRefreshTokenUsecase_RevokedToken_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockIRefreshTokenUsecase
func (_mock *MockIRefreshTokenUsecase) Save(token *domain.RefreshToken) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*domain.RefreshToken) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRefreshTokenUsecase_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockIRefreshTokenUsecase_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - token *domain.RefreshToken
func (_e *MockIRefreshTokenUsecase_Expecter) Save(token interface{}) *MockIRefreshTokenUsecase_Save_Call {
	return &MockIRefreshTokenUsecase_Save_Call{Call: _e.mock.On("Save", token)}
}

func (_c *MockIRefreshTokenUsecase_Save_Call) Run(run func(token *domain.RefreshToken)) *MockIRefreshTokenUsecase_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *domain.RefreshToken
		if args[0] != nil {
			arg0 = args[0].(*domain.RefreshToken)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRefreshTokenUsecase_Save_Call) Return(err error) *MockIRefreshTokenUsecase_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRefreshTokenUsecase_Save_Call) RunAndReturn(run func(token *domain.RefreshToken) error) *MockIRefreshTokenUsecase_Save_Call {
	_c.Call.Return(run)
	return _c
}
