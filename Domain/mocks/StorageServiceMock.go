// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorageService creates a new instance of MockStorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageService {
	mock := &MockStorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorageService is an autogenerated mock type for the StorageService type
type MockStorageService struct {
	mock.Mock
}

type MockStorageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageService) EXPECT() *MockStorageService_Expecter {
	return &MockStorageService_Expecter{mock: &_m.Mock}
}

// UploadFile provides a mock function for the type MockStorageService
func (_mock *MockStorageService) UploadFile(ctx context.Context, fileName string, fileData []byte) (string, error) {
	ret := _mock.Called(ctx, fileName, fileData)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) (string, error)); ok {
		return returnFunc(ctx, fileName, fileData)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = returnFunc(ctx, fileName, fileData)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = returnFunc(ctx, fileName, fileData)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageService_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockStorageService_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - fileName string
//   - fileData []byte
func (_e *MockStorageService_Expecter) UploadFile(ctx interface{}, fileName interface{}, fileData interface{}) *MockStorageService_UploadFile_Call {
	return &MockStorageService_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, fileName, fileData)}
}

func (_c *MockStorageService_UploadFile_Call) Run(run func(ctx context.Context, fileName string, fileData []byte)) *MockStorageService_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageService_UploadFile_Call) Return(s string, err error) *MockStorageService_UploadFile_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorageService_UploadFile_Call) RunAndReturn(run func(ctx context.Context, fileName string, fileData []byte) (string, error)) *MockStorageService_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}
