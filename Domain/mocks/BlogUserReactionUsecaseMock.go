// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockBlogUserReactionUsecase creates a new instance of MockBlogUserReactionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlogUserReactionUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlogUserReactionUsecase {
	mock := &MockBlogUserReactionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlogUserReactionUsecase is an autogenerated mock type for the BlogUserReactionUsecase type
type MockBlogUserReactionUsecase struct {
	mock.Mock
}

type MockBlogUserReactionUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlogUserReactionUsecase) EXPECT() *MockBlogUserReactionUsecase_Expecter {
	return &MockBlogUserReactionUsecase_Expecter{mock: &_m.Mock}
}

// CreateReaction provides a mock function for the type MockBlogUserReactionUsecase
func (_mock *MockBlogUserReactionUsecase) CreateReaction(ctx context.Context, reaction *domain.BlogUserReaction) (*domain.BlogUserReaction, *domain.DomainError) {
	ret := _mock.Called(ctx, reaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateReaction")
	}

	var r0 *domain.BlogUserReaction
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogUserReaction) (*domain.BlogUserReaction, *domain.DomainError)); ok {
		return returnFunc(ctx, reaction)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogUserReaction) *domain.BlogUserReaction); ok {
		r0 = returnFunc(ctx, reaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogUserReaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.BlogUserReaction) *domain.DomainError); ok {
		r1 = returnFunc(ctx, reaction)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogUserReactionUsecase_CreateReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReaction'
type MockBlogUserReactionUsecase_CreateReaction_Call struct {
	*mock.Call
}

// CreateReaction is a helper method to define mock.On call
//   - ctx context.Context
//   - reaction *domain.BlogUserReaction
func (_e *MockBlogUserReactionUsecase_Expecter) CreateReaction(ctx interface{}, reaction interface{}) *MockBlogUserReactionUsecase_CreateReaction_Call {
	return &MockBlogUserReactionUsecase_CreateReaction_Call{Call: _e.mock.On("CreateReaction", ctx, reaction)}
}

func (_c *MockBlogUserReactionUsecase_CreateReaction_Call) Run(run func(ctx context.Context, reaction *domain.BlogUserReaction)) *MockBlogUserReactionUsecase_CreateReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.BlogUserReaction
		if args[1] != nil {
			arg1 = args[1].(*domain.BlogUserReaction)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogUserReactionUsecase_CreateReaction_Call) Return(blogUserReaction *domain.BlogUserReaction, domainError *domain.DomainError) *MockBlogUserReactionUsecase_CreateReaction_Call {
	_c.Call.Return(blogUserReaction, domainError)
	return _c
}

func (_c *MockBlogUserReactionUsecase_CreateReaction_Call) RunAndReturn(run func(ctx context.Context, reaction *domain.BlogUserReaction) (*domain.BlogUserReaction, *domain.DomainError)) *MockBlogUserReactionUsecase_CreateReaction_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReaction provides a mock function for the type MockBlogUserReactionUsecase
func (_mock *MockBlogUserReactionUsecase) DeleteReaction(ctx context.Context, id string) *domain.DomainError {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReaction")
	}

	var r0 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.DomainError); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DomainError)
		}
	}
	return r0
}

// MockBlogUserReactionUsecase_DeleteReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReaction'
type MockBlogUserReactionUsecase_DeleteReaction_Call struct {
	*mock.Call
}

// DeleteReaction is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBlogUserReactionUsecase_Expecter) DeleteReaction(ctx interface{}, id interface{}) *MockBlogUserReactionUsecase_DeleteReaction_Call {
	return &MockBlogUserReactionUsecase_DeleteReaction_Call{Call: _e.mock.On("DeleteReaction", ctx, id)}
}

func (_c *MockBlogUserReactionUsecase_DeleteReaction_Call) Run(run func(ctx context.Context, id string)) *MockBlogUserReactionUsecase_DeleteReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogUserReactionUsecase_DeleteReaction_Call) Return(domainError *domain.DomainError) *MockBlogUserReactionUsecase_DeleteReaction_Call {
	_c.Call.Return(domainError)
	return _c
}

func (_c *MockBlogUserReactionUsecase_DeleteReaction_Call) RunAndReturn(run func(ctx context.Context, id string) *domain.DomainError) *MockBlogUserReactionUsecase_DeleteReaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserReaction provides a mock function for the type MockBlogUserReactionUsecase
func (_mock *MockBlogUserReactionUsecase) GetUserReaction(ctx context.Context, blogID string, userID string) (*domain.BlogUserReaction, *domain.DomainError) {
	ret := _mock.Called(ctx, blogID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserReaction")
	}

	var r0 *domain.BlogUserReaction
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.BlogUserReaction, *domain.DomainError)); ok {
		return returnFunc(ctx, blogID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.BlogUserReaction); ok {
		r0 = returnFunc(ctx, blogID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogUserReaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) *domain.DomainError); ok {
		r1 = returnFunc(ctx, blogID, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogUserReactionUsecase_GetUserReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserReaction'
type MockBlogUserReactionUsecase_GetUserReaction_Call struct {
	*mock.Call
}

// GetUserReaction is a helper method to define mock.On call
//   - ctx context.Context
//   - blogID string
//   - userID string
func (_e *MockBlogUserReactionUsecase_Expecter) GetUserReaction(ctx interface{}, blogID interface{}, userID interface{}) *MockBlogUserReactionUsecase_GetUserReaction_Call {
	return &MockBlogUserReactionUsecase_GetUserReaction_Call{Call: _e.mock.On("GetUserReaction", ctx, blogID, userID)}
}

func (_c *MockBlogUserReactionUsecase_GetUserReaction_Call) Run(run func(ctx context.Context, blogID string, userID string)) *MockBlogUserReactionUsecase_GetUserReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlogUserReactionUsecase_GetUserReaction_Call) Return(blogUserReaction *domain.BlogUserReaction, domainError *domain.DomainError) *MockBlogUserReactionUsecase_GetUserReaction_Call {
	_c.Call.Return(blogUserReaction, domainError)
	return _c
}

func (_c *MockBlogUserReactionUsecase_GetUserReaction_Call) RunAndReturn(run func(ctx context.Context, blogID string, userID string) (*domain.BlogUserReaction, *domain.DomainError)) *MockBlogUserReactionUsecase_GetUserReaction_Call {
	_c.Call.Return(run)
	return _c
}
