// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIOTPRepository creates a new instance of MockIOTPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOTPRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOTPRepository {
	mock := &MockIOTPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOTPRepository is an autogenerated mock type for the IOTPRepository type
type MockIOTPRepository struct {
	mock.Mock
}

type MockIOTPRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOTPRepository) EXPECT() *MockIOTPRepository_Expecter {
	return &MockIOTPRepository_Expecter{mock: &_m.Mock}
}

// DeleteOTPByID provides a mock function for the type MockIOTPRepository
func (_mock *MockIOTPRepository) DeleteOTPByID(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOTPByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOTPRepository_DeleteOTPByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOTPByID'
type MockIOTPRepository_DeleteOTPByID_Call struct {
	*mock.Call
}

// DeleteOTPByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockIOTPRepository_Expecter) DeleteOTPByID(ctx interface{}, id interface{}) *MockIOTPRepository_DeleteOTPByID_Call {
	return &MockIOTPRepository_DeleteOTPByID_Call{Call: _e.mock.On("DeleteOTPByID", ctx, id)}
}

func (_c *MockIOTPRepository_DeleteOTPByID_Call) Run(run func(ctx context.Context, id string)) *MockIOTPRepository_DeleteOTPByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOTPRepository_DeleteOTPByID_Call) Return(err error) *MockIOTPRepository_DeleteOTPByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOTPRepository_DeleteOTPByID_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockIOTPRepository_DeleteOTPByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindOTPByEmail provides a mock function for the type MockIOTPRepository
func (_mock *MockIOTPRepository) FindOTPByEmail(ctx context.Context, email string) (*domain.OTP, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindOTPByEmail")
	}

	var r0 *domain.OTP
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.OTP, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.OTP); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OTP)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOTPRepository_FindOTPByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOTPByEmail'
type MockIOTPRepository_FindOTPByEmail_Call struct {
	*mock.Call
}

// FindOTPByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIOTPRepository_Expecter) FindOTPByEmail(ctx interface{}, email interface{}) *MockIOTPRepository_FindOTPByEmail_Call {
	return &MockIOTPRepository_FindOTPByEmail_Call{Call: _e.mock.On("FindOTPByEmail", ctx, email)}
}

func (_c *MockIOTPRepository_FindOTPByEmail_Call) Run(run func(ctx context.Context, email string)) *MockIOTPRepository_FindOTPByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOTPRepository_FindOTPByEmail_Call) Return(oTP *domain.OTP, err error) *MockIOTPRepository_FindOTPByEmail_Call {
	_c.Call.Return(oTP, err)
	return _c
}

func (_c *MockIOTPRepository_FindOTPByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*domain.OTP, error)) *MockIOTPRepository_FindOTPByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOTP provides a mock function for the type MockIOTPRepository
func (_mock *MockIOTPRepository) SaveOTP(ctx context.Context, otp *domain.OTP) error {
	ret := _mock.Called(ctx, otp)

	if len(ret) == 0 {
		panic("no return value specified for SaveOTP")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.OTP) error); ok {
		r0 = returnFunc(ctx, otp)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOTPRepository_SaveOTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOTP'
type MockIOTPRepository_SaveOTP_Call struct {
	*mock.Call
}

// SaveOTP is a helper method to define mock.On call
//   - ctx context.Context
//   - otp *domain.OTP
func (_e *MockIOTPRepository_Expecter) SaveOTP(ctx interface{}, otp interface{}) *MockIOTPRepository_SaveOTP_Call {
	return &MockIOTPRepository_SaveOTP_Call{Call: _e.mock.On("SaveOTP", ctx, otp)}
}

func (_c *MockIOTPRepository_SaveOTP_Call) Run(run func(ctx context.Context, otp *domain.OTP)) *MockIOTPRepository_SaveOTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.OTP
		if args[1] != nil {
			arg1 = args[1].(*domain.OTP)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOTPRepository_SaveOTP_Call) Return(err error) *MockIOTPRepository_SaveOTP_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOTPRepository_SaveOTP_Call) RunAndReturn(run func(ctx context.Context, otp *domain.OTP) error) *MockIOTPRepository_SaveOTP_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOTPByID provides a mock function for the type MockIOTPRepository
func (_mock *MockIOTPRepository) UpdateOTPByID(ctx context.Context, otp *domain.OTP) error {
	ret := _mock.Called(ctx, otp)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOTPByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.OTP) error); ok {
		r0 = returnFunc(ctx, otp)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOTPRepository_UpdateOTPByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOTPByID'
type MockIOTPRepository_UpdateOTPByID_Call struct {
	*mock.Call
}

// UpdateOTPByID is a helper method to define mock.On call
//   - ctx context.Context
//   - otp *domain.OTP
func (_e *MockIOTPRepository_Expecter) UpdateOTPByID(ctx interface{}, otp interface{}) *MockIOTPRepository_UpdateOTPByID_Call {
	return &MockIOTPRepository_UpdateOTPByID_Call{Call: _e.mock.On("UpdateOTPByID", ctx, otp)}
}

func (_c *MockIOTPRepository_UpdateOTPByID_Call) Run(run func(ctx context.Context, otp *domain.OTP)) *MockIOTPRepository_UpdateOTPByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.OTP
		if args[1] != nil {
			arg1 = args[1].(*domain.OTP)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOTPRepository_UpdateOTPByID_Call) Return(err error) *MockIOTPRepository_UpdateOTPByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOTPRepository_UpdateOTPByID_Call) RunAndReturn(run func(ctx context.Context, otp *domain.OTP) error) *MockIOTPRepository_UpdateOTPByID_Call {
	_c.Call.Return(run)
	return _c
}
