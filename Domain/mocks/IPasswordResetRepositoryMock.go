// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIPasswordResetRepository creates a new instance of MockIPasswordResetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPasswordResetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPasswordResetRepository {
	mock := &MockIPasswordResetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIPasswordResetRepository is an autogenerated mock type for the IPasswordResetRepository type
type MockIPasswordResetRepository struct {
	mock.Mock
}

type MockIPasswordResetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPasswordResetRepository) EXPECT() *MockIPasswordResetRepository_Expecter {
	return &MockIPasswordResetRepository_Expecter{mock: &_m.Mock}
}

// DeleteResetToken provides a mock function for the type MockIPasswordResetRepository
func (_mock *MockIPasswordResetRepository) DeleteResetToken(ctx context.Context, email string) error {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResetToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIPasswordResetRepository_DeleteResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResetToken'
type MockIPasswordResetRepository_DeleteResetToken_Call struct {
	*mock.Call
}

// DeleteResetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIPasswordResetRepository_Expecter) DeleteResetToken(ctx interface{}, email interface{}) *MockIPasswordResetRepository_DeleteResetToken_Call {
	return &MockIPasswordResetRepository_DeleteResetToken_Call{Call: _e.mock.On("DeleteResetToken", ctx, email)}
}

func (_c *MockIPasswordResetRepository_DeleteResetToken_Call) Run(run func(ctx context.Context, email string)) *MockIPasswordResetRepository_DeleteResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPasswordResetRepository_DeleteResetToken_Call) Return(err error) *MockIPasswordResetRepository_DeleteResetToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIPasswordResetRepository_DeleteResetToken_Call) RunAndReturn(run func(ctx context.Context, email string) error) *MockIPasswordResetRepository_DeleteResetToken_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function for the type MockIPasswordResetRepository
func (_mock *MockIPasswordResetRepository) FindByEmail(ctx context.Context, email string) (*domain.PasswordResetToken, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *domain.PasswordResetToken
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.PasswordResetToken, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.PasswordResetToken); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PasswordResetToken)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIPasswordResetRepository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockIPasswordResetRepository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIPasswordResetRepository_Expecter) FindByEmail(ctx interface{}, email interface{}) *MockIPasswordResetRepository_FindByEmail_Call {
	return &MockIPasswordResetRepository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *MockIPasswordResetRepository_FindByEmail_Call) Run(run func(ctx context.Context, email string)) *MockIPasswordResetRepository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPasswordResetRepository_FindByEmail_Call) Return(passwordResetToken *domain.PasswordResetToken, err error) *MockIPasswordResetRepository_FindByEmail_Call {
	_c.Call.Return(passwordResetToken, err)
	return _c
}

func (_c *MockIPasswordResetRepository_FindByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*domain.PasswordResetToken, error)) *MockIPasswordResetRepository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsUsed provides a mock function for the type MockIPasswordResetRepository
func (_mock *MockIPasswordResetRepository) MarkAsUsed(ctx context.Context, token *domain.PasswordResetToken) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsUsed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PasswordResetToken) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIPasswordResetRepository_MarkAsUsed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsUsed'
type MockIPasswordResetRepository_MarkAsUsed_Call struct {
	*mock.Call
}

// MarkAsUsed is a helper method to define mock.On call
//   - ctx context.Context
//   - token *domain.PasswordResetToken
func (_e *MockIPasswordResetRepository_Expecter) MarkAsUsed(ctx interface{}, token interface{}) *MockIPasswordResetRepository_MarkAsUsed_Call {
	return &MockIPasswordResetRepository_MarkAsUsed_Call{Call: _e.mock.On("MarkAsUsed", ctx, token)}
}

func (_c *MockIPasswordResetRepository_MarkAsUsed_Call) Run(run func(ctx context.Context, token *domain.PasswordResetToken)) *MockIPasswordResetRepository_MarkAsUsed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.PasswordResetToken
		if args[1] != nil {
			arg1 = args[1].(*domain.PasswordResetToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPasswordResetRepository_MarkAsUsed_Call) Return(err error) *MockIPasswordResetRepository_MarkAsUsed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIPasswordResetRepository_MarkAsUsed_Call) RunAndReturn(run func(ctx context.Context, token *domain.PasswordResetToken) error) *MockIPasswordResetRepository_MarkAsUsed_Call {
	_c.Call.Return(run)
	return _c
}

// SaveResetToken provides a mock function for the type MockIPasswordResetRepository
func (_mock *MockIPasswordResetRepository) SaveResetToken(ctx context.Context, token *domain.PasswordResetToken) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for SaveResetToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PasswordResetToken) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIPasswordResetRepository_SaveResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveResetToken'
type MockIPasswordResetRepository_SaveResetToken_Call struct {
	*mock.Call
}

// SaveResetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token *domain.PasswordResetToken
func (_e *MockIPasswordResetRepository_Expecter) SaveResetToken(ctx interface{}, token interface{}) *MockIPasswordResetRepository_SaveResetToken_Call {
	return &MockIPasswordResetRepository_SaveResetToken_Call{Call: _e.mock.On("SaveResetToken", ctx, token)}
}

func (_c *MockIPasswordResetRepository_SaveResetToken_Call) Run(run func(ctx context.Context, token *domain.PasswordResetToken)) *MockIPasswordResetRepository_SaveResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.PasswordResetToken
		if args[1] != nil {
			arg1 = args[1].(*domain.PasswordResetToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPasswordResetRepository_SaveResetToken_Call) Return(err error) *MockIPasswordResetRepository_SaveResetToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIPasswordResetRepository_SaveResetToken_Call) RunAndReturn(run func(ctx context.Context, token *domain.PasswordResetToken) error) *MockIPasswordResetRepository_SaveResetToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateResetToken provides a mock function for the type MockIPasswordResetRepository
func (_mock *MockIPasswordResetRepository) UpdateResetToken(ctx context.Context, token *domain.PasswordResetToken) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResetToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.PasswordResetToken) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIPasswordResetRepository_UpdateResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateResetToken'
type MockIPasswordResetRepository_UpdateResetToken_Call struct {
	*mock.Call
}

// UpdateResetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token *domain.PasswordResetToken
func (_e *MockIPasswordResetRepository_Expecter) UpdateResetToken(ctx interface{}, token interface{}) *MockIPasswordResetRepository_UpdateResetToken_Call {
	return &MockIPasswordResetRepository_UpdateResetToken_Call{Call: _e.mock.On("UpdateResetToken", ctx, token)}
}

func (_c *MockIPasswordResetRepository_UpdateResetToken_Call) Run(run func(ctx context.Context, token *domain.PasswordResetToken)) *MockIPasswordResetRepository_UpdateResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.PasswordResetToken
		if args[1] != nil {
			arg1 = args[1].(*domain.PasswordResetToken)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIPasswordResetRepository_UpdateResetToken_Call) Return(err error) *MockIPasswordResetRepository_UpdateResetToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIPasswordResetRepository_UpdateResetToken_Call) RunAndReturn(run func(ctx context.Context, token *domain.PasswordResetToken) error) *MockIPasswordResetRepository_UpdateResetToken_Call {
	_c.Call.Return(run)
	return _c
}
