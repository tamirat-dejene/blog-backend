// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockBlogCommentUsecase creates a new instance of MockBlogCommentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlogCommentUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlogCommentUsecase {
	mock := &MockBlogCommentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBlogCommentUsecase is an autogenerated mock type for the BlogCommentUsecase type
type MockBlogCommentUsecase struct {
	mock.Mock
}

type MockBlogCommentUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlogCommentUsecase) EXPECT() *MockBlogCommentUsecase_Expecter {
	return &MockBlogCommentUsecase_Expecter{mock: &_m.Mock}
}

// CreateComment provides a mock function for the type MockBlogCommentUsecase
func (_mock *MockBlogCommentUsecase) CreateComment(ctx context.Context, comment *domain.BlogComment) (*domain.BlogComment, *domain.DomainError) {
	ret := _mock.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *domain.BlogComment
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogComment) (*domain.BlogComment, *domain.DomainError)); ok {
		return returnFunc(ctx, comment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BlogComment) *domain.BlogComment); ok {
		r0 = returnFunc(ctx, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.BlogComment) *domain.DomainError); ok {
		r1 = returnFunc(ctx, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogCommentUsecase_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MockBlogCommentUsecase_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comment *domain.BlogComment
func (_e *MockBlogCommentUsecase_Expecter) CreateComment(ctx interface{}, comment interface{}) *MockBlogCommentUsecase_CreateComment_Call {
	return &MockBlogCommentUsecase_CreateComment_Call{Call: _e.mock.On("CreateComment", ctx, comment)}
}

func (_c *MockBlogCommentUsecase_CreateComment_Call) Run(run func(ctx context.Context, comment *domain.BlogComment)) *MockBlogCommentUsecase_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.BlogComment
		if args[1] != nil {
			arg1 = args[1].(*domain.BlogComment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogCommentUsecase_CreateComment_Call) Return(blogComment *domain.BlogComment, domainError *domain.DomainError) *MockBlogCommentUsecase_CreateComment_Call {
	_c.Call.Return(blogComment, domainError)
	return _c
}

func (_c *MockBlogCommentUsecase_CreateComment_Call) RunAndReturn(run func(ctx context.Context, comment *domain.BlogComment) (*domain.BlogComment, *domain.DomainError)) *MockBlogCommentUsecase_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function for the type MockBlogCommentUsecase
func (_mock *MockBlogCommentUsecase) DeleteComment(ctx context.Context, id string) *domain.DomainError {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.DomainError); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DomainError)
		}
	}
	return r0
}

// MockBlogCommentUsecase_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockBlogCommentUsecase_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBlogCommentUsecase_Expecter) DeleteComment(ctx interface{}, id interface{}) *MockBlogCommentUsecase_DeleteComment_Call {
	return &MockBlogCommentUsecase_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, id)}
}

func (_c *MockBlogCommentUsecase_DeleteComment_Call) Run(run func(ctx context.Context, id string)) *MockBlogCommentUsecase_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogCommentUsecase_DeleteComment_Call) Return(domainError *domain.DomainError) *MockBlogCommentUsecase_DeleteComment_Call {
	_c.Call.Return(domainError)
	return _c
}

func (_c *MockBlogCommentUsecase_DeleteComment_Call) RunAndReturn(run func(ctx context.Context, id string) *domain.DomainError) *MockBlogCommentUsecase_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentByID provides a mock function for the type MockBlogCommentUsecase
func (_mock *MockBlogCommentUsecase) GetCommentByID(ctx context.Context, id string) (*domain.BlogComment, *domain.DomainError) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 *domain.BlogComment
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.BlogComment, *domain.DomainError)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.BlogComment); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) *domain.DomainError); ok {
		r1 = returnFunc(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogCommentUsecase_GetCommentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentByID'
type MockBlogCommentUsecase_GetCommentByID_Call struct {
	*mock.Call
}

// GetCommentByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBlogCommentUsecase_Expecter) GetCommentByID(ctx interface{}, id interface{}) *MockBlogCommentUsecase_GetCommentByID_Call {
	return &MockBlogCommentUsecase_GetCommentByID_Call{Call: _e.mock.On("GetCommentByID", ctx, id)}
}

func (_c *MockBlogCommentUsecase_GetCommentByID_Call) Run(run func(ctx context.Context, id string)) *MockBlogCommentUsecase_GetCommentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBlogCommentUsecase_GetCommentByID_Call) Return(blogComment *domain.BlogComment, domainError *domain.DomainError) *MockBlogCommentUsecase_GetCommentByID_Call {
	_c.Call.Return(blogComment, domainError)
	return _c
}

func (_c *MockBlogCommentUsecase_GetCommentByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.BlogComment, *domain.DomainError)) *MockBlogCommentUsecase_GetCommentByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentsByBlogID provides a mock function for the type MockBlogCommentUsecase
func (_mock *MockBlogCommentUsecase) GetCommentsByBlogID(ctx context.Context, blogID string, limit int) ([]domain.BlogComment, *domain.DomainError) {
	ret := _mock.Called(ctx, blogID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByBlogID")
	}

	var r0 []domain.BlogComment
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) ([]domain.BlogComment, *domain.DomainError)); ok {
		return returnFunc(ctx, blogID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) []domain.BlogComment); ok {
		r0 = returnFunc(ctx, blogID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BlogComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int) *domain.DomainError); ok {
		r1 = returnFunc(ctx, blogID, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogCommentUsecase_GetCommentsByBlogID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentsByBlogID'
type MockBlogCommentUsecase_GetCommentsByBlogID_Call struct {
	*mock.Call
}

// GetCommentsByBlogID is a helper method to define mock.On call
//   - ctx context.Context
//   - blogID string
//   - limit int
func (_e *MockBlogCommentUsecase_Expecter) GetCommentsByBlogID(ctx interface{}, blogID interface{}, limit interface{}) *MockBlogCommentUsecase_GetCommentsByBlogID_Call {
	return &MockBlogCommentUsecase_GetCommentsByBlogID_Call{Call: _e.mock.On("GetCommentsByBlogID", ctx, blogID, limit)}
}

func (_c *MockBlogCommentUsecase_GetCommentsByBlogID_Call) Run(run func(ctx context.Context, blogID string, limit int)) *MockBlogCommentUsecase_GetCommentsByBlogID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlogCommentUsecase_GetCommentsByBlogID_Call) Return(blogComments []domain.BlogComment, domainError *domain.DomainError) *MockBlogCommentUsecase_GetCommentsByBlogID_Call {
	_c.Call.Return(blogComments, domainError)
	return _c
}

func (_c *MockBlogCommentUsecase_GetCommentsByBlogID_Call) RunAndReturn(run func(ctx context.Context, blogID string, limit int) ([]domain.BlogComment, *domain.DomainError)) *MockBlogCommentUsecase_GetCommentsByBlogID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function for the type MockBlogCommentUsecase
func (_mock *MockBlogCommentUsecase) UpdateComment(ctx context.Context, id string, comment *domain.BlogComment) (*domain.BlogComment, *domain.DomainError) {
	ret := _mock.Called(ctx, id, comment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *domain.BlogComment
	var r1 *domain.DomainError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BlogComment) (*domain.BlogComment, *domain.DomainError)); ok {
		return returnFunc(ctx, id, comment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.BlogComment) *domain.BlogComment); ok {
		r0 = returnFunc(ctx, id, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogComment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *domain.BlogComment) *domain.DomainError); ok {
		r1 = returnFunc(ctx, id, comment)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.DomainError)
		}
	}
	return r0, r1
}

// MockBlogCommentUsecase_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type MockBlogCommentUsecase_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - comment *domain.BlogComment
func (_e *MockBlogCommentUsecase_Expecter) UpdateComment(ctx interface{}, id interface{}, comment interface{}) *MockBlogCommentUsecase_UpdateComment_Call {
	return &MockBlogCommentUsecase_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, id, comment)}
}

func (_c *MockBlogCommentUsecase_UpdateComment_Call) Run(run func(ctx context.Context, id string, comment *domain.BlogComment)) *MockBlogCommentUsecase_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.BlogComment
		if args[2] != nil {
			arg2 = args[2].(*domain.BlogComment)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBlogCommentUsecase_UpdateComment_Call) Return(blogComment *domain.BlogComment, domainError *domain.DomainError) *MockBlogCommentUsecase_UpdateComment_Call {
	_c.Call.Return(blogComment, domainError)
	return _c
}

func (_c *MockBlogCommentUsecase_UpdateComment_Call) RunAndReturn(run func(ctx context.Context, id string, comment *domain.BlogComment) (*domain.BlogComment, *domain.DomainError)) *MockBlogCommentUsecase_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}
