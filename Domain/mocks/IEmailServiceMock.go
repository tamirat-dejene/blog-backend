// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIEmailService creates a new instance of MockIEmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIEmailService {
	mock := &MockIEmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIEmailService is an autogenerated mock type for the IEmailService type
type MockIEmailService struct {
	mock.Mock
}

type MockIEmailService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIEmailService) EXPECT() *MockIEmailService_Expecter {
	return &MockIEmailService_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function for the type MockIEmailService
func (_mock *MockIEmailService) SendEmail(ctx context.Context, to string, subject string, body string) error {
	ret := _mock.Called(ctx, to, subject, body)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, to, subject, body)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIEmailService_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MockIEmailService_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - to string
//   - subject string
//   - body string
func (_e *MockIEmailService_Expecter) SendEmail(ctx interface{}, to interface{}, subject interface{}, body interface{}) *MockIEmailService_SendEmail_Call {
	return &MockIEmailService_SendEmail_Call{Call: _e.mock.On("SendEmail", ctx, to, subject, body)}
}

func (_c *MockIEmailService_SendEmail_Call) Run(run func(ctx context.Context, to string, subject string, body string)) *MockIEmailService_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIEmailService_SendEmail_Call) Return(err error) *MockIEmailService_SendEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIEmailService_SendEmail_Call) RunAndReturn(run func(ctx context.Context, to string, subject string, body string) error) *MockIEmailService_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}
