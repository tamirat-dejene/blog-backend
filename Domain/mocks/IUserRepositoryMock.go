// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package domain_mocks

import (
	"context"
	"g6/blog-api/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIUserRepository creates a new instance of MockIUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserRepository {
	mock := &MockIUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIUserRepository is an autogenerated mock type for the IUserRepository type
type MockIUserRepository struct {
	mock.Mock
}

type MockIUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserRepository) EXPECT() *MockIUserRepository_Expecter {
	return &MockIUserRepository_Expecter{mock: &_m.Mock}
}

// ChangeRole provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) ChangeRole(context1 context.Context, s string, s1 string, s2 string) error {
	ret := _mock.Called(context1, s, s1, s2)

	if len(ret) == 0 {
		panic("no return value specified for ChangeRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(context1, s, s1, s2)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserRepository_ChangeRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeRole'
type MockIUserRepository_ChangeRole_Call struct {
	*mock.Call
}

// ChangeRole is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - s1 string
//   - s2 string
func (_e *MockIUserRepository_Expecter) ChangeRole(context1 interface{}, s interface{}, s1 interface{}, s2 interface{}) *MockIUserRepository_ChangeRole_Call {
	return &MockIUserRepository_ChangeRole_Call{Call: _e.mock.On("ChangeRole", context1, s, s1, s2)}
}

func (_c *MockIUserRepository_ChangeRole_Call) Run(run func(context1 context.Context, s string, s1 string, s2 string)) *MockIUserRepository_ChangeRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIUserRepository_ChangeRole_Call) Return(err error) *MockIUserRepository_ChangeRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserRepository_ChangeRole_Call) RunAndReturn(run func(context1 context.Context, s string, s1 string, s2 string) error) *MockIUserRepository_ChangeRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) CreateUser(context1 context.Context, user *domain.User) error {
	ret := _mock.Called(context1, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = returnFunc(context1, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - context1 context.Context
//   - user *domain.User
func (_e *MockIUserRepository_Expecter) CreateUser(context1 interface{}, user interface{}) *MockIUserRepository_CreateUser_Call {
	return &MockIUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", context1, user)}
}

func (_c *MockIUserRepository_CreateUser_Call) Run(run func(context1 context.Context, user *domain.User)) *MockIUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.User
		if args[1] != nil {
			arg1 = args[1].(*domain.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepository_CreateUser_Call) Return(err error) *MockIUserRepository_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserRepository_CreateUser_Call) RunAndReturn(run func(context1 context.Context, user *domain.User) error) *MockIUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsernameOrEmail provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) FindByUsernameOrEmail(context1 context.Context, s string) (domain.User, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsernameOrEmail")
	}

	var r0 domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Get(0).(domain.User)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserRepository_FindByUsernameOrEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsernameOrEmail'
type MockIUserRepository_FindByUsernameOrEmail_Call struct {
	*mock.Call
}

// FindByUsernameOrEmail is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockIUserRepository_Expecter) FindByUsernameOrEmail(context1 interface{}, s interface{}) *MockIUserRepository_FindByUsernameOrEmail_Call {
	return &MockIUserRepository_FindByUsernameOrEmail_Call{Call: _e.mock.On("FindByUsernameOrEmail", context1, s)}
}

func (_c *MockIUserRepository_FindByUsernameOrEmail_Call) Run(run func(context1 context.Context, s string)) *MockIUserRepository_FindByUsernameOrEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepository_FindByUsernameOrEmail_Call) Return(user domain.User, err error) *MockIUserRepository_FindByUsernameOrEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserRepository_FindByUsernameOrEmail_Call) RunAndReturn(run func(context1 context.Context, s string) (domain.User, error)) *MockIUserRepository_FindByUsernameOrEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByID provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) FindUserByID(context1 context.Context, s string) (*domain.User, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserRepository_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type MockIUserRepository_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockIUserRepository_Expecter) FindUserByID(context1 interface{}, s interface{}) *MockIUserRepository_FindUserByID_Call {
	return &MockIUserRepository_FindUserByID_Call{Call: _e.mock.On("FindUserByID", context1, s)}
}

func (_c *MockIUserRepository_FindUserByID_Call) Run(run func(context1 context.Context, s string)) *MockIUserRepository_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepository_FindUserByID_Call) Return(user *domain.User, err error) *MockIUserRepository_FindUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserRepository_FindUserByID_Call) RunAndReturn(run func(context1 context.Context, s string) (*domain.User, error)) *MockIUserRepository_FindUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) GetAllUsers(context1 context.Context) ([]*domain.User, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.User, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.User); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserRepository_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockIUserRepository_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockIUserRepository_Expecter) GetAllUsers(context1 interface{}) *MockIUserRepository_GetAllUsers_Call {
	return &MockIUserRepository_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", context1)}
}

func (_c *MockIUserRepository_GetAllUsers_Call) Run(run func(context1 context.Context)) *MockIUserRepository_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIUserRepository_GetAllUsers_Call) Return(users []*domain.User, err error) *MockIUserRepository_GetAllUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockIUserRepository_GetAllUsers_Call) RunAndReturn(run func(context1 context.Context) ([]*domain.User, error)) *MockIUserRepository_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) GetUserByEmail(context1 context.Context, s string) (*domain.User, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockIUserRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockIUserRepository_Expecter) GetUserByEmail(context1 interface{}, s interface{}) *MockIUserRepository_GetUserByEmail_Call {
	return &MockIUserRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", context1, s)}
}

func (_c *MockIUserRepository_GetUserByEmail_Call) Run(run func(context1 context.Context, s string)) *MockIUserRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepository_GetUserByEmail_Call) Return(user *domain.User, err error) *MockIUserRepository_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserRepository_GetUserByEmail_Call) RunAndReturn(run func(context1 context.Context, s string) (*domain.User, error)) *MockIUserRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) GetUserByUsername(context1 context.Context, s string) (*domain.User, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIUserRepository_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockIUserRepository_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockIUserRepository_Expecter) GetUserByUsername(context1 interface{}, s interface{}) *MockIUserRepository_GetUserByUsername_Call {
	return &MockIUserRepository_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", context1, s)}
}

func (_c *MockIUserRepository_GetUserByUsername_Call) Run(run func(context1 context.Context, s string)) *MockIUserRepository_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepository_GetUserByUsername_Call) Return(user *domain.User, err error) *MockIUserRepository_GetUserByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockIUserRepository_GetUserByUsername_Call) RunAndReturn(run func(context1 context.Context, s string) (*domain.User, error)) *MockIUserRepository_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// InvalidateTokens provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) InvalidateTokens(context1 context.Context, s string) error {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateTokens")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(context1, s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserRepository_InvalidateTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateTokens'
type MockIUserRepository_InvalidateTokens_Call struct {
	*mock.Call
}

// InvalidateTokens is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
func (_e *MockIUserRepository_Expecter) InvalidateTokens(context1 interface{}, s interface{}) *MockIUserRepository_InvalidateTokens_Call {
	return &MockIUserRepository_InvalidateTokens_Call{Call: _e.mock.On("InvalidateTokens", context1, s)}
}

func (_c *MockIUserRepository_InvalidateTokens_Call) Run(run func(context1 context.Context, s string)) *MockIUserRepository_InvalidateTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIUserRepository_InvalidateTokens_Call) Return(err error) *MockIUserRepository_InvalidateTokens_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserRepository_InvalidateTokens_Call) RunAndReturn(run func(context1 context.Context, s string) error) *MockIUserRepository_InvalidateTokens_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockIUserRepository
func (_mock *MockIUserRepository) UpdateUser(context1 context.Context, s string, user *domain.User) error {
	ret := _mock.Called(context1, s, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *domain.User) error); ok {
		r0 = returnFunc(context1, s, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIUserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockIUserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - user *domain.User
func (_e *MockIUserRepository_Expecter) UpdateUser(context1 interface{}, s interface{}, user interface{}) *MockIUserRepository_UpdateUser_Call {
	return &MockIUserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", context1, s, user)}
}

func (_c *MockIUserRepository_UpdateUser_Call) Run(run func(context1 context.Context, s string, user *domain.User)) *MockIUserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *domain.User
		if args[2] != nil {
			arg2 = args[2].(*domain.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIUserRepository_UpdateUser_Call) Return(err error) *MockIUserRepository_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIUserRepository_UpdateUser_Call) RunAndReturn(run func(context1 context.Context, s string, user *domain.User) error) *MockIUserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
